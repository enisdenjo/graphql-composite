// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`fixture 'federation/simple-interface-object' > query 'AccountsIsActive' > should execute and explain 1`] = `
[
  {
    "data": {
      "accounts": [
        {
          "id": "u1",
        },
        {
          "id": "u2",
        },
        {
          "id": "u3",
        },
      ],
    },
    "exports": [
      {
        "kind": "scalar",
        "name": "id",
      },
    ],
    "includes": [
      {
        "data": {
          "_entities": [
            {
              "isActive": false,
            },
          ],
        },
        "exports": [
          {
            "kind": "scalar",
            "name": "isActive",
          },
        ],
        "includes": [],
        "kind": "interface",
        "ofType": "Account",
        "operation": "query ($id: ID!) {
  _entities(representations: [{__typename: "Account", id: $id}]) {
    ... on Account {
      isActive
    }
  }
}",
        "pathInData": [
          "accounts",
          0,
        ],
        "pathToExportData": [
          "_entities",
          0,
        ],
        "subgraph": "c",
        "type": "[Account]!",
        "variables": {
          "id": "u1",
        },
      },
      {
        "data": {
          "_entities": [
            {
              "isActive": false,
            },
          ],
        },
        "exports": [
          {
            "kind": "scalar",
            "name": "isActive",
          },
        ],
        "includes": [],
        "kind": "interface",
        "ofType": "Account",
        "operation": "query ($id: ID!) {
  _entities(representations: [{__typename: "Account", id: $id}]) {
    ... on Account {
      isActive
    }
  }
}",
        "pathInData": [
          "accounts",
          1,
        ],
        "pathToExportData": [
          "_entities",
          0,
        ],
        "subgraph": "c",
        "type": "[Account]!",
        "variables": {
          "id": "u2",
        },
      },
      {
        "data": {
          "_entities": [
            {
              "isActive": false,
            },
          ],
        },
        "exports": [
          {
            "kind": "scalar",
            "name": "isActive",
          },
        ],
        "includes": [],
        "kind": "interface",
        "ofType": "Account",
        "operation": "query ($id: ID!) {
  _entities(representations: [{__typename: "Account", id: $id}]) {
    ... on Account {
      isActive
    }
  }
}",
        "pathInData": [
          "accounts",
          2,
        ],
        "pathToExportData": [
          "_entities",
          0,
        ],
        "subgraph": "c",
        "type": "[Account]!",
        "variables": {
          "id": "u3",
        },
      },
    ],
    "kind": "interface",
    "ofType": "Account",
    "operation": "{
  accounts {
    id
  }
}",
    "pathInData": [
      "accounts",
    ],
    "pathToExportData": [
      "accounts",
    ],
    "subgraph": "b",
    "type": "[Account]",
    "variables": {},
  },
]
`;

exports[`fixture 'federation/simple-interface-object' > query 'AccountsIsActive' > should plan gather 1`] = `
{
  "operation": {
    "name": "AccountsIsActive",
    "resolvers": {
      "accounts": {
        "exports": [
          {
            "kind": "scalar",
            "name": "id",
          },
        ],
        "includes": {
          "": {
            "exports": [
              {
                "kind": "scalar",
                "name": "isActive",
              },
            ],
            "includes": {},
            "kind": "interface",
            "ofType": "Account",
            "operation": "query ($id: ID!) {
  _entities(representations: [{__typename: "Account", id: $id}]) {
    ... on Account {
      isActive
    }
  }
}",
            "pathToExportData": [
              "_entities",
              0,
            ],
            "subgraph": "c",
            "type": "[Account]!",
            "variables": {
              "id": {
                "kind": "select",
                "name": "id",
                "select": "id",
              },
            },
          },
        },
        "kind": "interface",
        "ofType": "Account",
        "operation": "{
  accounts {
    id
  }
}",
        "pathToExportData": [
          "accounts",
        ],
        "subgraph": "b",
        "type": "[Account]",
        "variables": {},
      },
    },
    "type": "Query",
  },
  "query": "query AccountsIsActive {
  accounts {
    id
    isActive
  }
}",
}
`;

exports[`fixture 'federation/simple-interface-object' > query 'AccountsIsActiveOnAdmin' > should execute and explain 1`] = `
[
  {
    "data": {
      "accounts": [
        {
          "id": "u1",
        },
        {
          "id": "u2",
        },
        {
          "id": "u3",
        },
      ],
    },
    "exports": [
      {
        "kind": "scalar",
        "name": "id",
      },
    ],
    "includes": [
      {
        "data": {
          "_entities": [
            {
              "isActive": true,
            },
          ],
        },
        "exports": [
          {
            "kind": "scalar",
            "name": "isActive",
          },
        ],
        "includes": [],
        "kind": "object",
        "ofType": "Admin",
        "operation": "query ($id: ID!) {
  _entities(representations: [{__typename: "Admin", id: $id}]) {
    ... on Admin {
      isActive
    }
  }
}",
        "pathInData": [
          "accounts",
          0,
        ],
        "pathToExportData": [
          "_entities",
          0,
        ],
        "subgraph": "a",
        "type": "[Admin]!",
        "variables": {
          "id": "u1",
        },
      },
      {
        "data": {
          "_entities": [
            {
              "isActive": true,
            },
          ],
        },
        "exports": [
          {
            "kind": "scalar",
            "name": "isActive",
          },
        ],
        "includes": [],
        "kind": "object",
        "ofType": "Admin",
        "operation": "query ($id: ID!) {
  _entities(representations: [{__typename: "Admin", id: $id}]) {
    ... on Admin {
      isActive
    }
  }
}",
        "pathInData": [
          "accounts",
          1,
        ],
        "pathToExportData": [
          "_entities",
          0,
        ],
        "subgraph": "a",
        "type": "[Admin]!",
        "variables": {
          "id": "u2",
        },
      },
      {
        "data": {
          "_entities": [
            null,
          ],
        },
        "exports": [
          {
            "kind": "scalar",
            "name": "isActive",
          },
        ],
        "includes": [],
        "kind": "object",
        "ofType": "Admin",
        "operation": "query ($id: ID!) {
  _entities(representations: [{__typename: "Admin", id: $id}]) {
    ... on Admin {
      isActive
    }
  }
}",
        "pathInData": [
          "accounts",
          2,
        ],
        "pathToExportData": [
          "_entities",
          0,
        ],
        "subgraph": "a",
        "type": "[Admin]!",
        "variables": {
          "id": "u3",
        },
      },
    ],
    "kind": "interface",
    "ofType": "Account",
    "operation": "{
  accounts {
    id
  }
}",
    "pathInData": [
      "accounts",
    ],
    "pathToExportData": [
      "accounts",
    ],
    "subgraph": "b",
    "type": "[Account]",
    "variables": {},
  },
]
`;

exports[`fixture 'federation/simple-interface-object' > query 'AccountsIsActiveOnAdmin' > should plan gather 1`] = `
{
  "operation": {
    "name": "AccountsIsActiveOnAdmin",
    "resolvers": {
      "accounts": {
        "exports": [
          {
            "kind": "scalar",
            "name": "id",
          },
        ],
        "includes": {
          "": {
            "exports": [
              {
                "kind": "scalar",
                "name": "isActive",
              },
            ],
            "includes": {},
            "kind": "object",
            "ofType": "Admin",
            "operation": "query ($id: ID!) {
  _entities(representations: [{__typename: "Admin", id: $id}]) {
    ... on Admin {
      isActive
    }
  }
}",
            "pathToExportData": [
              "_entities",
              0,
            ],
            "subgraph": "a",
            "type": "[Admin]!",
            "variables": {
              "id": {
                "kind": "select",
                "name": "id",
                "select": "id",
              },
            },
          },
        },
        "kind": "interface",
        "ofType": "Account",
        "operation": "{
  accounts {
    id
  }
}",
        "pathToExportData": [
          "accounts",
        ],
        "subgraph": "b",
        "type": "[Account]",
        "variables": {},
      },
    },
    "type": "Query",
  },
  "query": "query AccountsIsActiveOnAdmin {
  accounts {
    id
    ... on Admin {
      isActive
    }
  }
}",
}
`;

exports[`fixture 'federation/simple-interface-object' > query 'AccountsNames' > should execute and explain 1`] = `
[
  {
    "data": {
      "accounts": [
        {
          "name": "Alice",
        },
        {
          "name": "Bob",
        },
        {
          "name": "Charlie",
        },
      ],
    },
    "exports": [
      {
        "kind": "scalar",
        "name": "name",
      },
    ],
    "includes": [],
    "kind": "interface",
    "ofType": "Account",
    "operation": "{
  accounts {
    name
  }
}",
    "pathInData": [
      "accounts",
    ],
    "pathToExportData": [
      "accounts",
    ],
    "subgraph": "b",
    "type": "[Account]",
    "variables": {},
  },
]
`;

exports[`fixture 'federation/simple-interface-object' > query 'AccountsNames' > should plan gather 1`] = `
{
  "operation": {
    "name": "AccountsNames",
    "resolvers": {
      "accounts": {
        "exports": [
          {
            "kind": "scalar",
            "name": "name",
          },
        ],
        "includes": {},
        "kind": "interface",
        "ofType": "Account",
        "operation": "{
  accounts {
    name
  }
}",
        "pathToExportData": [
          "accounts",
        ],
        "subgraph": "b",
        "type": "[Account]",
        "variables": {},
      },
    },
    "type": "Query",
  },
  "query": "query AccountsNames {
  accounts {
    name
  }
}",
}
`;

exports[`fixture 'federation/simple-interface-object' > query 'AccountsSpreadAdmin' > should execute and explain 1`] = `
[
  {
    "data": {
      "accounts": [
        {
          "id": "u1",
        },
        {
          "id": "u2",
        },
        {
          "id": "u3",
        },
      ],
    },
    "exports": [
      {
        "kind": "scalar",
        "name": "id",
        "private": true,
      },
    ],
    "includes": [
      {
        "data": {
          "_entities": [
            {
              "id": "u1",
            },
          ],
        },
        "exports": [
          {
            "kind": "scalar",
            "name": "id",
            "private": true,
          },
        ],
        "includes": [
          {
            "data": {
              "_entities": [
                {
                  "name": "Alice",
                },
              ],
            },
            "exports": [
              {
                "kind": "scalar",
                "name": "name",
              },
            ],
            "includes": [],
            "kind": "interface",
            "ofType": "Account",
            "operation": "query ($id: ID!) {
  _entities(representations: [{__typename: "Account", id: $id}]) {
    ... on Account {
      name
    }
  }
}",
            "pathInData": [
              "accounts",
              0,
            ],
            "pathToExportData": [
              "_entities",
              0,
            ],
            "subgraph": "b",
            "type": "[Account]!",
            "variables": {
              "id": "u1",
            },
          },
        ],
        "kind": "object",
        "ofType": "Admin",
        "operation": "query ($id: ID!) {
  _entities(representations: [{__typename: "Admin", id: $id}]) {
    ... on Admin {
      id
    }
  }
}",
        "pathInData": [
          "accounts",
          0,
        ],
        "pathToExportData": [
          "_entities",
          0,
        ],
        "subgraph": "a",
        "type": "[Admin]!",
        "variables": {
          "id": "u1",
        },
      },
      {
        "data": {
          "_entities": [
            {
              "id": "u2",
            },
          ],
        },
        "exports": [
          {
            "kind": "scalar",
            "name": "id",
            "private": true,
          },
        ],
        "includes": [
          {
            "data": {
              "_entities": [
                {
                  "name": "Bob",
                },
              ],
            },
            "exports": [
              {
                "kind": "scalar",
                "name": "name",
              },
            ],
            "includes": [],
            "kind": "interface",
            "ofType": "Account",
            "operation": "query ($id: ID!) {
  _entities(representations: [{__typename: "Account", id: $id}]) {
    ... on Account {
      name
    }
  }
}",
            "pathInData": [
              "accounts",
              1,
            ],
            "pathToExportData": [
              "_entities",
              0,
            ],
            "subgraph": "b",
            "type": "[Account]!",
            "variables": {
              "id": "u2",
            },
          },
        ],
        "kind": "object",
        "ofType": "Admin",
        "operation": "query ($id: ID!) {
  _entities(representations: [{__typename: "Admin", id: $id}]) {
    ... on Admin {
      id
    }
  }
}",
        "pathInData": [
          "accounts",
          1,
        ],
        "pathToExportData": [
          "_entities",
          0,
        ],
        "subgraph": "a",
        "type": "[Admin]!",
        "variables": {
          "id": "u2",
        },
      },
      {
        "data": {
          "_entities": [
            null,
          ],
        },
        "exports": [
          {
            "kind": "scalar",
            "name": "id",
            "private": true,
          },
        ],
        "includes": [
          {
            "exports": [
              {
                "kind": "scalar",
                "name": "name",
              },
            ],
            "includes": [],
            "kind": "interface",
            "ofType": "Account",
            "operation": "query ($id: ID!) {
  _entities(representations: [{__typename: "Account", id: $id}]) {
    ... on Account {
      name
    }
  }
}",
            "pathInData": [
              "accounts",
              2,
            ],
            "pathToExportData": [
              "_entities",
              0,
            ],
            "subgraph": "b",
            "type": "[Account]!",
            "variables": {
              "id": undefined,
            },
          },
        ],
        "kind": "object",
        "ofType": "Admin",
        "operation": "query ($id: ID!) {
  _entities(representations: [{__typename: "Admin", id: $id}]) {
    ... on Admin {
      id
    }
  }
}",
        "pathInData": [
          "accounts",
          2,
        ],
        "pathToExportData": [
          "_entities",
          0,
        ],
        "subgraph": "a",
        "type": "[Admin]!",
        "variables": {
          "id": "u3",
        },
      },
    ],
    "kind": "interface",
    "ofType": "Account",
    "operation": "{
  accounts {
    id
  }
}",
    "pathInData": [
      "accounts",
    ],
    "pathToExportData": [
      "accounts",
    ],
    "subgraph": "b",
    "type": "[Account]",
    "variables": {},
  },
]
`;

exports[`fixture 'federation/simple-interface-object' > query 'AccountsSpreadAdmin' > should plan gather 1`] = `
{
  "operation": {
    "name": "AccountsSpreadAdmin",
    "resolvers": {
      "accounts": {
        "exports": [
          {
            "kind": "scalar",
            "name": "id",
            "private": true,
          },
        ],
        "includes": {
          "": {
            "exports": [
              {
                "kind": "scalar",
                "name": "id",
                "private": true,
              },
            ],
            "includes": {
              "": {
                "exports": [
                  {
                    "kind": "scalar",
                    "name": "name",
                  },
                ],
                "includes": {},
                "kind": "interface",
                "ofType": "Account",
                "operation": "query ($id: ID!) {
  _entities(representations: [{__typename: "Account", id: $id}]) {
    ... on Account {
      name
    }
  }
}",
                "pathToExportData": [
                  "_entities",
                  0,
                ],
                "subgraph": "b",
                "type": "[Account]!",
                "variables": {
                  "id": {
                    "kind": "select",
                    "name": "id",
                    "select": "id",
                  },
                },
              },
            },
            "kind": "object",
            "ofType": "Admin",
            "operation": "query ($id: ID!) {
  _entities(representations: [{__typename: "Admin", id: $id}]) {
    ... on Admin {
      id
    }
  }
}",
            "pathToExportData": [
              "_entities",
              0,
            ],
            "subgraph": "a",
            "type": "[Admin]!",
            "variables": {
              "id": {
                "kind": "select",
                "name": "id",
                "select": "id",
              },
            },
          },
        },
        "kind": "interface",
        "ofType": "Account",
        "operation": "{
  accounts {
    id
  }
}",
        "pathToExportData": [
          "accounts",
        ],
        "subgraph": "b",
        "type": "[Account]",
        "variables": {},
      },
    },
    "type": "Query",
  },
  "query": "query AccountsSpreadAdmin {
  accounts {
    ... on Admin {
      name
    }
  }
}",
}
`;

exports[`fixture 'federation/simple-interface-object' > query 'AccountsWithAdminAndTypename' > should execute and explain 1`] = `
[
  {
    "data": {
      "accounts": [
        {
          "id": "u1",
        },
        {
          "id": "u2",
        },
        {
          "id": "u3",
        },
      ],
    },
    "exports": [
      {
        "kind": "scalar",
        "name": "id",
        "private": true,
      },
    ],
    "includes": [
      {
        "data": {
          "_entities": [
            {
              "id": "u1",
            },
          ],
        },
        "exports": [
          {
            "kind": "scalar",
            "name": "id",
            "private": true,
          },
        ],
        "includes": [
          {
            "data": {
              "_entities": [
                {
                  "__typename": "Admin",
                },
              ],
            },
            "exports": [
              {
                "kind": "scalar",
                "name": "__typename",
              },
            ],
            "includes": [],
            "kind": "interface",
            "ofType": "Account",
            "operation": "query ($id: ID!) {
  _entities(representations: [{__typename: "Account", id: $id}]) {
    ... on Account {
      __typename
    }
  }
}",
            "pathInData": [
              "accounts",
              0,
            ],
            "pathToExportData": [
              "_entities",
              0,
            ],
            "subgraph": "a",
            "type": "[Account]!",
            "variables": {
              "id": "u1",
            },
          },
        ],
        "kind": "object",
        "ofType": "Admin",
        "operation": "query ($id: ID!) {
  _entities(representations: [{__typename: "Admin", id: $id}]) {
    ... on Admin {
      id
    }
  }
}",
        "pathInData": [
          "accounts",
          0,
        ],
        "pathToExportData": [
          "_entities",
          0,
        ],
        "subgraph": "a",
        "type": "[Admin]!",
        "variables": {
          "id": "u1",
        },
      },
      {
        "data": {
          "_entities": [
            {
              "id": "u2",
            },
          ],
        },
        "exports": [
          {
            "kind": "scalar",
            "name": "id",
            "private": true,
          },
        ],
        "includes": [
          {
            "data": {
              "_entities": [
                {
                  "__typename": "Admin",
                },
              ],
            },
            "exports": [
              {
                "kind": "scalar",
                "name": "__typename",
              },
            ],
            "includes": [],
            "kind": "interface",
            "ofType": "Account",
            "operation": "query ($id: ID!) {
  _entities(representations: [{__typename: "Account", id: $id}]) {
    ... on Account {
      __typename
    }
  }
}",
            "pathInData": [
              "accounts",
              1,
            ],
            "pathToExportData": [
              "_entities",
              0,
            ],
            "subgraph": "a",
            "type": "[Account]!",
            "variables": {
              "id": "u2",
            },
          },
        ],
        "kind": "object",
        "ofType": "Admin",
        "operation": "query ($id: ID!) {
  _entities(representations: [{__typename: "Admin", id: $id}]) {
    ... on Admin {
      id
    }
  }
}",
        "pathInData": [
          "accounts",
          1,
        ],
        "pathToExportData": [
          "_entities",
          0,
        ],
        "subgraph": "a",
        "type": "[Admin]!",
        "variables": {
          "id": "u2",
        },
      },
      {
        "data": {
          "_entities": [
            null,
          ],
        },
        "exports": [
          {
            "kind": "scalar",
            "name": "id",
            "private": true,
          },
        ],
        "includes": [
          {
            "exports": [
              {
                "kind": "scalar",
                "name": "__typename",
              },
            ],
            "includes": [],
            "kind": "interface",
            "ofType": "Account",
            "operation": "query ($id: ID!) {
  _entities(representations: [{__typename: "Account", id: $id}]) {
    ... on Account {
      __typename
    }
  }
}",
            "pathInData": [
              "accounts",
              2,
            ],
            "pathToExportData": [
              "_entities",
              0,
            ],
            "subgraph": "a",
            "type": "[Account]!",
            "variables": {
              "id": undefined,
            },
          },
        ],
        "kind": "object",
        "ofType": "Admin",
        "operation": "query ($id: ID!) {
  _entities(representations: [{__typename: "Admin", id: $id}]) {
    ... on Admin {
      id
    }
  }
}",
        "pathInData": [
          "accounts",
          2,
        ],
        "pathToExportData": [
          "_entities",
          0,
        ],
        "subgraph": "a",
        "type": "[Admin]!",
        "variables": {
          "id": "u3",
        },
      },
    ],
    "kind": "interface",
    "ofType": "Account",
    "operation": "{
  accounts {
    id
  }
}",
    "pathInData": [
      "accounts",
    ],
    "pathToExportData": [
      "accounts",
    ],
    "subgraph": "b",
    "type": "[Account]",
    "variables": {},
  },
]
`;

exports[`fixture 'federation/simple-interface-object' > query 'AccountsWithAdminAndTypename' > should plan gather 1`] = `
{
  "operation": {
    "name": "AccountsWithAdminAndTypename",
    "resolvers": {
      "accounts": {
        "exports": [
          {
            "kind": "scalar",
            "name": "id",
            "private": true,
          },
        ],
        "includes": {
          "": {
            "exports": [
              {
                "kind": "scalar",
                "name": "id",
                "private": true,
              },
            ],
            "includes": {
              "": {
                "exports": [
                  {
                    "kind": "scalar",
                    "name": "__typename",
                  },
                ],
                "includes": {},
                "kind": "interface",
                "ofType": "Account",
                "operation": "query ($id: ID!) {
  _entities(representations: [{__typename: "Account", id: $id}]) {
    ... on Account {
      __typename
    }
  }
}",
                "pathToExportData": [
                  "_entities",
                  0,
                ],
                "subgraph": "a",
                "type": "[Account]!",
                "variables": {
                  "id": {
                    "kind": "select",
                    "name": "id",
                    "select": "id",
                  },
                },
              },
            },
            "kind": "object",
            "ofType": "Admin",
            "operation": "query ($id: ID!) {
  _entities(representations: [{__typename: "Admin", id: $id}]) {
    ... on Admin {
      id
    }
  }
}",
            "pathToExportData": [
              "_entities",
              0,
            ],
            "subgraph": "a",
            "type": "[Admin]!",
            "variables": {
              "id": {
                "kind": "select",
                "name": "id",
                "select": "id",
              },
            },
          },
        },
        "kind": "interface",
        "ofType": "Account",
        "operation": "{
  accounts {
    id
  }
}",
        "pathToExportData": [
          "accounts",
        ],
        "subgraph": "b",
        "type": "[Account]",
        "variables": {},
      },
    },
    "type": "Query",
  },
  "query": "query AccountsWithAdminAndTypename {
  accounts {
    ... on Admin {
      __typename
    }
  }
}",
}
`;

exports[`fixture 'federation/simple-interface-object' > query 'AccountsWithTypename' > should execute and explain 1`] = `
[
  {
    "data": {
      "accounts": [
        {
          "id": "u1",
          "name": "Alice",
        },
        {
          "id": "u2",
          "name": "Bob",
        },
        {
          "id": "u3",
          "name": "Charlie",
        },
      ],
    },
    "exports": [
      {
        "kind": "scalar",
        "name": "name",
      },
      {
        "kind": "scalar",
        "name": "id",
        "private": true,
      },
    ],
    "includes": [
      {
        "data": {
          "_entities": [
            {
              "__typename": "Admin",
            },
          ],
        },
        "exports": [
          {
            "kind": "scalar",
            "name": "__typename",
          },
        ],
        "includes": [],
        "kind": "interface",
        "ofType": "Account",
        "operation": "query ($id: ID!) {
  _entities(representations: [{__typename: "Account", id: $id}]) {
    ... on Account {
      __typename
    }
  }
}",
        "pathInData": [
          "accounts",
          0,
        ],
        "pathToExportData": [
          "_entities",
          0,
        ],
        "subgraph": "a",
        "type": "[Account]!",
        "variables": {
          "id": "u1",
        },
      },
      {
        "data": {
          "_entities": [
            {
              "__typename": "Admin",
            },
          ],
        },
        "exports": [
          {
            "kind": "scalar",
            "name": "__typename",
          },
        ],
        "includes": [],
        "kind": "interface",
        "ofType": "Account",
        "operation": "query ($id: ID!) {
  _entities(representations: [{__typename: "Account", id: $id}]) {
    ... on Account {
      __typename
    }
  }
}",
        "pathInData": [
          "accounts",
          1,
        ],
        "pathToExportData": [
          "_entities",
          0,
        ],
        "subgraph": "a",
        "type": "[Account]!",
        "variables": {
          "id": "u2",
        },
      },
      {
        "data": {
          "_entities": [
            {
              "__typename": "Regular",
            },
          ],
        },
        "exports": [
          {
            "kind": "scalar",
            "name": "__typename",
          },
        ],
        "includes": [],
        "kind": "interface",
        "ofType": "Account",
        "operation": "query ($id: ID!) {
  _entities(representations: [{__typename: "Account", id: $id}]) {
    ... on Account {
      __typename
    }
  }
}",
        "pathInData": [
          "accounts",
          2,
        ],
        "pathToExportData": [
          "_entities",
          0,
        ],
        "subgraph": "a",
        "type": "[Account]!",
        "variables": {
          "id": "u3",
        },
      },
    ],
    "kind": "interface",
    "ofType": "Account",
    "operation": "{
  accounts {
    name
    id
  }
}",
    "pathInData": [
      "accounts",
    ],
    "pathToExportData": [
      "accounts",
    ],
    "subgraph": "b",
    "type": "[Account]",
    "variables": {},
  },
]
`;

exports[`fixture 'federation/simple-interface-object' > query 'AccountsWithTypename' > should plan gather 1`] = `
{
  "operation": {
    "name": "AccountsWithTypename",
    "resolvers": {
      "accounts": {
        "exports": [
          {
            "kind": "scalar",
            "name": "name",
          },
          {
            "kind": "scalar",
            "name": "id",
            "private": true,
          },
        ],
        "includes": {
          "": {
            "exports": [
              {
                "kind": "scalar",
                "name": "__typename",
              },
            ],
            "includes": {},
            "kind": "interface",
            "ofType": "Account",
            "operation": "query ($id: ID!) {
  _entities(representations: [{__typename: "Account", id: $id}]) {
    ... on Account {
      __typename
    }
  }
}",
            "pathToExportData": [
              "_entities",
              0,
            ],
            "subgraph": "a",
            "type": "[Account]!",
            "variables": {
              "id": {
                "kind": "select",
                "name": "id",
                "select": "id",
              },
            },
          },
        },
        "kind": "interface",
        "ofType": "Account",
        "operation": "{
  accounts {
    name
    id
  }
}",
        "pathToExportData": [
          "accounts",
        ],
        "subgraph": "b",
        "type": "[Account]",
        "variables": {},
      },
    },
    "type": "Query",
  },
  "query": "query AccountsWithTypename {
  accounts {
    name
    __typename
  }
}",
}
`;

exports[`fixture 'federation/simple-interface-object' > query 'AnotherUsers' > should execute and explain 1`] = `
[
  {
    "data": {
      "anotherUsers": [
        {
          "id": "u1",
          "username": "u1-username",
        },
        {
          "id": "u2",
          "username": "u2-username",
        },
      ],
    },
    "exports": [
      {
        "kind": "scalar",
        "name": "id",
      },
      {
        "kind": "scalar",
        "name": "username",
      },
    ],
    "includes": [
      {
        "data": {
          "_entities": [
            {
              "name": "u1-name",
            },
          ],
        },
        "exports": [
          {
            "kind": "scalar",
            "name": "name",
          },
        ],
        "includes": [],
        "kind": "interface",
        "ofType": "NodeWithName",
        "operation": "query ($id: ID!) {
  _entities(representations: [{__typename: "NodeWithName", id: $id}]) {
    ... on NodeWithName {
      name
    }
  }
}",
        "pathInData": [
          "anotherUsers",
          0,
        ],
        "pathToExportData": [
          "_entities",
          0,
        ],
        "subgraph": "a",
        "type": "[NodeWithName]!",
        "variables": {
          "id": "u1",
        },
      },
      {
        "data": {
          "_entities": [
            {
              "name": "u2-name",
            },
          ],
        },
        "exports": [
          {
            "kind": "scalar",
            "name": "name",
          },
        ],
        "includes": [],
        "kind": "interface",
        "ofType": "NodeWithName",
        "operation": "query ($id: ID!) {
  _entities(representations: [{__typename: "NodeWithName", id: $id}]) {
    ... on NodeWithName {
      name
    }
  }
}",
        "pathInData": [
          "anotherUsers",
          1,
        ],
        "pathToExportData": [
          "_entities",
          0,
        ],
        "subgraph": "a",
        "type": "[NodeWithName]!",
        "variables": {
          "id": "u2",
        },
      },
    ],
    "kind": "interface",
    "ofType": "NodeWithName",
    "operation": "{
  anotherUsers {
    id
    username
  }
}",
    "pathInData": [
      "anotherUsers",
    ],
    "pathToExportData": [
      "anotherUsers",
    ],
    "subgraph": "b",
    "type": "[NodeWithName!]!",
    "variables": {},
  },
]
`;

exports[`fixture 'federation/simple-interface-object' > query 'AnotherUsers' > should plan gather 1`] = `
{
  "operation": {
    "name": "AnotherUsers",
    "resolvers": {
      "anotherUsers": {
        "exports": [
          {
            "kind": "scalar",
            "name": "id",
          },
          {
            "kind": "scalar",
            "name": "username",
          },
        ],
        "includes": {
          "": {
            "exports": [
              {
                "kind": "scalar",
                "name": "name",
              },
            ],
            "includes": {},
            "kind": "interface",
            "ofType": "NodeWithName",
            "operation": "query ($id: ID!) {
  _entities(representations: [{__typename: "NodeWithName", id: $id}]) {
    ... on NodeWithName {
      name
    }
  }
}",
            "pathToExportData": [
              "_entities",
              0,
            ],
            "subgraph": "a",
            "type": "[NodeWithName]!",
            "variables": {
              "id": {
                "kind": "select",
                "name": "id",
                "select": "id",
              },
            },
          },
        },
        "kind": "interface",
        "ofType": "NodeWithName",
        "operation": "{
  anotherUsers {
    id
    username
  }
}",
        "pathToExportData": [
          "anotherUsers",
        ],
        "subgraph": "b",
        "type": "[NodeWithName!]!",
        "variables": {},
      },
    },
    "type": "Query",
  },
  "query": "query AnotherUsers {
  anotherUsers {
    id
    name
    username
  }
}",
}
`;

exports[`fixture 'federation/simple-interface-object' > query 'AnotherUsersWithAdvancedUserSpread' > should execute and explain 1`] = `
[
  {
    "data": {
      "anotherUsers": [
        {
          "id": "u1",
        },
        {
          "id": "u2",
        },
      ],
    },
    "exports": [
      {
        "kind": "scalar",
        "name": "id",
      },
    ],
    "includes": [
      {
        "data": {
          "_entities": [
            {
              "age": 11,
              "id": "u1",
              "name": "u1-name",
            },
          ],
        },
        "exports": [
          {
            "kind": "scalar",
            "name": "age",
          },
          {
            "kind": "scalar",
            "name": "id",
          },
          {
            "kind": "scalar",
            "name": "name",
          },
        ],
        "includes": [
          {
            "data": {
              "_entities": [
                {
                  "username": "u1-username",
                },
              ],
            },
            "exports": [
              {
                "kind": "scalar",
                "name": "username",
              },
            ],
            "includes": [],
            "kind": "interface",
            "ofType": "NodeWithName",
            "operation": "query ($id: ID!) {
  _entities(representations: [{__typename: "NodeWithName", id: $id}]) {
    ... on NodeWithName {
      username
    }
  }
}",
            "pathInData": [
              "anotherUsers",
              0,
            ],
            "pathToExportData": [
              "_entities",
              0,
            ],
            "subgraph": "b",
            "type": "[NodeWithName]!",
            "variables": {
              "id": "u1",
            },
          },
        ],
        "kind": "object",
        "ofType": "User",
        "operation": "query ($id: ID!) {
  _entities(representations: [{__typename: "User", id: $id}]) {
    ... on User {
      age
      id
      name
    }
  }
}",
        "pathInData": [
          "anotherUsers",
          0,
        ],
        "pathToExportData": [
          "_entities",
          0,
        ],
        "subgraph": "a",
        "type": "[User]!",
        "variables": {
          "id": "u1",
        },
      },
      {
        "data": {
          "_entities": [
            {
              "age": 22,
              "id": "u2",
              "name": "u2-name",
            },
          ],
        },
        "exports": [
          {
            "kind": "scalar",
            "name": "age",
          },
          {
            "kind": "scalar",
            "name": "id",
          },
          {
            "kind": "scalar",
            "name": "name",
          },
        ],
        "includes": [
          {
            "data": {
              "_entities": [
                {
                  "username": "u2-username",
                },
              ],
            },
            "exports": [
              {
                "kind": "scalar",
                "name": "username",
              },
            ],
            "includes": [],
            "kind": "interface",
            "ofType": "NodeWithName",
            "operation": "query ($id: ID!) {
  _entities(representations: [{__typename: "NodeWithName", id: $id}]) {
    ... on NodeWithName {
      username
    }
  }
}",
            "pathInData": [
              "anotherUsers",
              1,
            ],
            "pathToExportData": [
              "_entities",
              0,
            ],
            "subgraph": "b",
            "type": "[NodeWithName]!",
            "variables": {
              "id": "u2",
            },
          },
        ],
        "kind": "object",
        "ofType": "User",
        "operation": "query ($id: ID!) {
  _entities(representations: [{__typename: "User", id: $id}]) {
    ... on User {
      age
      id
      name
    }
  }
}",
        "pathInData": [
          "anotherUsers",
          1,
        ],
        "pathToExportData": [
          "_entities",
          0,
        ],
        "subgraph": "a",
        "type": "[User]!",
        "variables": {
          "id": "u2",
        },
      },
    ],
    "kind": "interface",
    "ofType": "NodeWithName",
    "operation": "{
  anotherUsers {
    id
  }
}",
    "pathInData": [
      "anotherUsers",
    ],
    "pathToExportData": [
      "anotherUsers",
    ],
    "subgraph": "b",
    "type": "[NodeWithName!]!",
    "variables": {},
  },
]
`;

exports[`fixture 'federation/simple-interface-object' > query 'AnotherUsersWithAdvancedUserSpread' > should plan gather 1`] = `
{
  "operation": {
    "name": "AnotherUsersWithAdvancedUserSpread",
    "resolvers": {
      "anotherUsers": {
        "exports": [
          {
            "kind": "scalar",
            "name": "id",
          },
        ],
        "includes": {
          "": {
            "exports": [
              {
                "kind": "scalar",
                "name": "age",
              },
              {
                "kind": "scalar",
                "name": "id",
              },
              {
                "kind": "scalar",
                "name": "name",
              },
            ],
            "includes": {
              "": {
                "exports": [
                  {
                    "kind": "scalar",
                    "name": "username",
                  },
                ],
                "includes": {},
                "kind": "interface",
                "ofType": "NodeWithName",
                "operation": "query ($id: ID!) {
  _entities(representations: [{__typename: "NodeWithName", id: $id}]) {
    ... on NodeWithName {
      username
    }
  }
}",
                "pathToExportData": [
                  "_entities",
                  0,
                ],
                "subgraph": "b",
                "type": "[NodeWithName]!",
                "variables": {
                  "id": {
                    "kind": "select",
                    "name": "id",
                    "select": "id",
                  },
                },
              },
            },
            "kind": "object",
            "ofType": "User",
            "operation": "query ($id: ID!) {
  _entities(representations: [{__typename: "User", id: $id}]) {
    ... on User {
      age
      id
      name
    }
  }
}",
            "pathToExportData": [
              "_entities",
              0,
            ],
            "subgraph": "a",
            "type": "[User]!",
            "variables": {
              "id": {
                "kind": "select",
                "name": "id",
                "select": "id",
              },
            },
          },
        },
        "kind": "interface",
        "ofType": "NodeWithName",
        "operation": "{
  anotherUsers {
    id
  }
}",
        "pathToExportData": [
          "anotherUsers",
        ],
        "subgraph": "b",
        "type": "[NodeWithName!]!",
        "variables": {},
      },
    },
    "type": "Query",
  },
  "query": "query AnotherUsersWithAdvancedUserSpread {
  anotherUsers {
    ... on User {
      age
      id
      name
      username
    }
    id
    name
  }
}",
}
`;

exports[`fixture 'federation/simple-interface-object' > query 'AnotherUsersWithUserSpread' > should execute and explain 1`] = `
[
  {
    "data": {
      "anotherUsers": [
        {
          "id": "u1",
        },
        {
          "id": "u2",
        },
      ],
    },
    "exports": [
      {
        "kind": "scalar",
        "name": "id",
        "private": true,
      },
    ],
    "includes": [
      {
        "data": {
          "_entities": [
            {
              "age": 11,
            },
          ],
        },
        "exports": [
          {
            "kind": "scalar",
            "name": "age",
          },
        ],
        "includes": [],
        "kind": "object",
        "ofType": "User",
        "operation": "query ($id: ID!) {
  _entities(representations: [{__typename: "User", id: $id}]) {
    ... on User {
      age
    }
  }
}",
        "pathInData": [
          "anotherUsers",
          0,
        ],
        "pathToExportData": [
          "_entities",
          0,
        ],
        "subgraph": "a",
        "type": "[User]!",
        "variables": {
          "id": "u1",
        },
      },
      {
        "data": {
          "_entities": [
            {
              "age": 22,
            },
          ],
        },
        "exports": [
          {
            "kind": "scalar",
            "name": "age",
          },
        ],
        "includes": [],
        "kind": "object",
        "ofType": "User",
        "operation": "query ($id: ID!) {
  _entities(representations: [{__typename: "User", id: $id}]) {
    ... on User {
      age
    }
  }
}",
        "pathInData": [
          "anotherUsers",
          1,
        ],
        "pathToExportData": [
          "_entities",
          0,
        ],
        "subgraph": "a",
        "type": "[User]!",
        "variables": {
          "id": "u2",
        },
      },
    ],
    "kind": "interface",
    "ofType": "NodeWithName",
    "operation": "{
  anotherUsers {
    id
  }
}",
    "pathInData": [
      "anotherUsers",
    ],
    "pathToExportData": [
      "anotherUsers",
    ],
    "subgraph": "b",
    "type": "[NodeWithName!]!",
    "variables": {},
  },
]
`;

exports[`fixture 'federation/simple-interface-object' > query 'AnotherUsersWithUserSpread' > should plan gather 1`] = `
{
  "operation": {
    "name": "AnotherUsersWithUserSpread",
    "resolvers": {
      "anotherUsers": {
        "exports": [
          {
            "kind": "scalar",
            "name": "id",
            "private": true,
          },
        ],
        "includes": {
          "": {
            "exports": [
              {
                "kind": "scalar",
                "name": "age",
              },
            ],
            "includes": {},
            "kind": "object",
            "ofType": "User",
            "operation": "query ($id: ID!) {
  _entities(representations: [{__typename: "User", id: $id}]) {
    ... on User {
      age
    }
  }
}",
            "pathToExportData": [
              "_entities",
              0,
            ],
            "subgraph": "a",
            "type": "[User]!",
            "variables": {
              "id": {
                "kind": "select",
                "name": "id",
                "select": "id",
              },
            },
          },
        },
        "kind": "interface",
        "ofType": "NodeWithName",
        "operation": "{
  anotherUsers {
    id
  }
}",
        "pathToExportData": [
          "anotherUsers",
        ],
        "subgraph": "b",
        "type": "[NodeWithName!]!",
        "variables": {},
      },
    },
    "type": "Query",
  },
  "query": "query AnotherUsersWithUserSpread {
  anotherUsers {
    ... on User {
      age
    }
  }
}",
}
`;

exports[`fixture 'federation/simple-interface-object' > query 'UsersWithAdvancedUserSpread' > should execute and explain 1`] = `
[
  {
    "data": {
      "users": [
        {
          "age": 11,
          "id": "u1",
          "name": "u1-name",
        },
        {
          "age": 22,
          "id": "u2",
          "name": "u2-name",
        },
      ],
    },
    "exports": [
      {
        "kind": "fragment",
        "selections": [
          {
            "kind": "scalar",
            "name": "age",
          },
          {
            "kind": "scalar",
            "name": "id",
          },
          {
            "kind": "scalar",
            "name": "name",
          },
        ],
        "typeCondition": "User",
      },
    ],
    "includes": [
      {
        "data": {
          "_entities": [
            {
              "username": "u1-username",
            },
          ],
        },
        "exports": [
          {
            "kind": "scalar",
            "name": "username",
          },
        ],
        "includes": [],
        "kind": "interface",
        "ofType": "NodeWithName",
        "operation": "query ($id: ID!) {
  _entities(representations: [{__typename: "NodeWithName", id: $id}]) {
    ... on NodeWithName {
      username
    }
  }
}",
        "pathInData": [
          "users",
          0,
        ],
        "pathToExportData": [
          "_entities",
          0,
        ],
        "subgraph": "b",
        "type": "[NodeWithName]!",
        "variables": {
          "id": "u1",
        },
      },
      {
        "data": {
          "_entities": [
            {
              "username": "u2-username",
            },
          ],
        },
        "exports": [
          {
            "kind": "scalar",
            "name": "username",
          },
        ],
        "includes": [],
        "kind": "interface",
        "ofType": "NodeWithName",
        "operation": "query ($id: ID!) {
  _entities(representations: [{__typename: "NodeWithName", id: $id}]) {
    ... on NodeWithName {
      username
    }
  }
}",
        "pathInData": [
          "users",
          1,
        ],
        "pathToExportData": [
          "_entities",
          0,
        ],
        "subgraph": "b",
        "type": "[NodeWithName]!",
        "variables": {
          "id": "u2",
        },
      },
    ],
    "kind": "interface",
    "ofType": "NodeWithName",
    "operation": "{
  users {
    ... on User {
      age
      id
      name
    }
  }
}",
    "pathInData": [
      "users",
    ],
    "pathToExportData": [
      "users",
    ],
    "subgraph": "a",
    "type": "[NodeWithName!]!",
    "variables": {},
  },
]
`;

exports[`fixture 'federation/simple-interface-object' > query 'UsersWithAdvancedUserSpread' > should plan gather 1`] = `
{
  "operation": {
    "name": "UsersWithAdvancedUserSpread",
    "resolvers": {
      "users": {
        "exports": [
          {
            "kind": "fragment",
            "selections": [
              {
                "kind": "scalar",
                "name": "age",
              },
              {
                "kind": "scalar",
                "name": "id",
              },
              {
                "kind": "scalar",
                "name": "name",
              },
            ],
            "typeCondition": "User",
          },
        ],
        "includes": {
          "": {
            "exports": [
              {
                "kind": "scalar",
                "name": "username",
              },
            ],
            "includes": {},
            "kind": "interface",
            "ofType": "NodeWithName",
            "operation": "query ($id: ID!) {
  _entities(representations: [{__typename: "NodeWithName", id: $id}]) {
    ... on NodeWithName {
      username
    }
  }
}",
            "pathToExportData": [
              "_entities",
              0,
            ],
            "subgraph": "b",
            "type": "[NodeWithName]!",
            "variables": {
              "id": {
                "kind": "select",
                "name": "id",
                "select": "id",
              },
            },
          },
        },
        "kind": "interface",
        "ofType": "NodeWithName",
        "operation": "{
  users {
    ... on User {
      age
      id
      name
    }
  }
}",
        "pathToExportData": [
          "users",
        ],
        "subgraph": "a",
        "type": "[NodeWithName!]!",
        "variables": {},
      },
    },
    "type": "Query",
  },
  "query": "query UsersWithAdvancedUserSpread {
  users {
    ... on User {
      age
      id
      name
      username
    }
    id
    name
  }
}",
}
`;

exports[`fixture 'federation/simple-interface-object' > query 'UsersWithUserSpread' > should execute and explain 1`] = `
[
  {
    "data": {
      "users": [
        {
          "age": 11,
        },
        {
          "age": 22,
        },
      ],
    },
    "exports": [
      {
        "kind": "fragment",
        "selections": [
          {
            "kind": "scalar",
            "name": "age",
          },
        ],
        "typeCondition": "User",
      },
    ],
    "includes": [],
    "kind": "interface",
    "ofType": "NodeWithName",
    "operation": "{
  users {
    ... on User {
      age
    }
  }
}",
    "pathInData": [
      "users",
    ],
    "pathToExportData": [
      "users",
    ],
    "subgraph": "a",
    "type": "[NodeWithName!]!",
    "variables": {},
  },
]
`;

exports[`fixture 'federation/simple-interface-object' > query 'UsersWithUserSpread' > should plan gather 1`] = `
{
  "operation": {
    "name": "UsersWithUserSpread",
    "resolvers": {
      "users": {
        "exports": [
          {
            "kind": "fragment",
            "selections": [
              {
                "kind": "scalar",
                "name": "age",
              },
            ],
            "typeCondition": "User",
          },
        ],
        "includes": {},
        "kind": "interface",
        "ofType": "NodeWithName",
        "operation": "{
  users {
    ... on User {
      age
    }
  }
}",
        "pathToExportData": [
          "users",
        ],
        "subgraph": "a",
        "type": "[NodeWithName!]!",
        "variables": {},
      },
    },
    "type": "Query",
  },
  "query": "query UsersWithUserSpread {
  users {
    ... on User {
      age
    }
  }
}",
}
`;

exports[`fixture 'federation/simple-interface-object' > query 'UsersWithUsername' > should execute and explain 1`] = `
[
  {
    "data": {
      "users": [
        {
          "id": "u1",
          "name": "u1-name",
        },
        {
          "id": "u2",
          "name": "u2-name",
        },
      ],
    },
    "exports": [
      {
        "kind": "scalar",
        "name": "id",
      },
      {
        "kind": "scalar",
        "name": "name",
      },
    ],
    "includes": [
      {
        "data": {
          "_entities": [
            {
              "username": "u1-username",
            },
          ],
        },
        "exports": [
          {
            "kind": "scalar",
            "name": "username",
          },
        ],
        "includes": [],
        "kind": "interface",
        "ofType": "NodeWithName",
        "operation": "query ($id: ID!) {
  _entities(representations: [{__typename: "NodeWithName", id: $id}]) {
    ... on NodeWithName {
      username
    }
  }
}",
        "pathInData": [
          "users",
          0,
        ],
        "pathToExportData": [
          "_entities",
          0,
        ],
        "subgraph": "b",
        "type": "[NodeWithName]!",
        "variables": {
          "id": "u1",
        },
      },
      {
        "data": {
          "_entities": [
            {
              "username": "u2-username",
            },
          ],
        },
        "exports": [
          {
            "kind": "scalar",
            "name": "username",
          },
        ],
        "includes": [],
        "kind": "interface",
        "ofType": "NodeWithName",
        "operation": "query ($id: ID!) {
  _entities(representations: [{__typename: "NodeWithName", id: $id}]) {
    ... on NodeWithName {
      username
    }
  }
}",
        "pathInData": [
          "users",
          1,
        ],
        "pathToExportData": [
          "_entities",
          0,
        ],
        "subgraph": "b",
        "type": "[NodeWithName]!",
        "variables": {
          "id": "u2",
        },
      },
    ],
    "kind": "interface",
    "ofType": "NodeWithName",
    "operation": "{
  users {
    id
    name
  }
}",
    "pathInData": [
      "users",
    ],
    "pathToExportData": [
      "users",
    ],
    "subgraph": "a",
    "type": "[NodeWithName!]!",
    "variables": {},
  },
]
`;

exports[`fixture 'federation/simple-interface-object' > query 'UsersWithUsername' > should plan gather 1`] = `
{
  "operation": {
    "name": "UsersWithUsername",
    "resolvers": {
      "users": {
        "exports": [
          {
            "kind": "scalar",
            "name": "id",
          },
          {
            "kind": "scalar",
            "name": "name",
          },
        ],
        "includes": {
          "": {
            "exports": [
              {
                "kind": "scalar",
                "name": "username",
              },
            ],
            "includes": {},
            "kind": "interface",
            "ofType": "NodeWithName",
            "operation": "query ($id: ID!) {
  _entities(representations: [{__typename: "NodeWithName", id: $id}]) {
    ... on NodeWithName {
      username
    }
  }
}",
            "pathToExportData": [
              "_entities",
              0,
            ],
            "subgraph": "b",
            "type": "[NodeWithName]!",
            "variables": {
              "id": {
                "kind": "select",
                "name": "id",
                "select": "id",
              },
            },
          },
        },
        "kind": "interface",
        "ofType": "NodeWithName",
        "operation": "{
  users {
    id
    name
  }
}",
        "pathToExportData": [
          "users",
        ],
        "subgraph": "a",
        "type": "[NodeWithName!]!",
        "variables": {},
      },
    },
    "type": "Query",
  },
  "query": "query UsersWithUsername {
  users {
    id
    name
    username
  }
}",
}
`;

exports[`fixture 'federation/union-interface-distributed' > query 'NodesDiffFields' > should execute and explain 1`] = `
[
  {
    "data": {
      "nodes": [
        {
          "warranty": 3,
        },
        {
          "warranty": 4,
        },
      ],
    },
    "exports": [
      {
        "kind": "fragment",
        "selections": [
          {
            "kind": "scalar",
            "name": "warranty",
          },
        ],
        "typeCondition": "Toaster",
      },
    ],
    "includes": [],
    "kind": "interface",
    "ofType": "Node",
    "operation": "{
  nodes {
    ... on Toaster {
      warranty
    }
  }
}",
    "pathInData": [
      "nodes",
    ],
    "pathToExportData": [
      "nodes",
    ],
    "subgraph": "a",
    "type": "[Node]",
    "variables": {},
  },
]
`;

exports[`fixture 'federation/union-interface-distributed' > query 'NodesDiffFields' > should plan gather 1`] = `
{
  "operation": {
    "name": "NodesDiffFields",
    "resolvers": {
      "nodes": {
        "exports": [
          {
            "kind": "fragment",
            "selections": [
              {
                "kind": "scalar",
                "name": "warranty",
              },
            ],
            "typeCondition": "Toaster",
          },
        ],
        "includes": {},
        "kind": "interface",
        "ofType": "Node",
        "operation": "{
  nodes {
    ... on Toaster {
      warranty
    }
  }
}",
        "pathToExportData": [
          "nodes",
        ],
        "subgraph": "a",
        "type": "[Node]",
        "variables": {},
      },
    },
    "type": "Query",
  },
  "query": "query NodesDiffFields {
  nodes {
    ... on Toaster {
      warranty
    }
    ... on Oven {
      id
    }
  }
}",
}
`;

exports[`fixture 'federation/union-interface-distributed' > query 'NodesId' > should execute and explain 1`] = `
[
  {
    "data": {
      "nodes": [
        {
          "id": "toaster1",
        },
        {
          "id": "toaster2",
        },
      ],
    },
    "exports": [
      {
        "kind": "scalar",
        "name": "id",
      },
    ],
    "includes": [],
    "kind": "interface",
    "ofType": "Node",
    "operation": "{
  nodes {
    id
  }
}",
    "pathInData": [
      "nodes",
    ],
    "pathToExportData": [
      "nodes",
    ],
    "subgraph": "a",
    "type": "[Node]",
    "variables": {},
  },
]
`;

exports[`fixture 'federation/union-interface-distributed' > query 'NodesId' > should plan gather 1`] = `
{
  "operation": {
    "name": "NodesId",
    "resolvers": {
      "nodes": {
        "exports": [
          {
            "kind": "scalar",
            "name": "id",
          },
        ],
        "includes": {},
        "kind": "interface",
        "ofType": "Node",
        "operation": "{
  nodes {
    id
  }
}",
        "pathToExportData": [
          "nodes",
        ],
        "subgraph": "a",
        "type": "[Node]",
        "variables": {},
      },
    },
    "type": "Query",
  },
  "query": "query NodesId {
  nodes {
    id
  }
}",
}
`;

exports[`fixture 'federation/union-interface-distributed' > query 'ProductsNodeFragmentId' > should execute and explain 1`] = `
[
  {
    "data": {
      "products": [
        {
          "id": "oven1",
        },
        {
          "id": "oven2",
        },
        {
          "id": "toaster1",
        },
        {
          "id": "toaster2",
        },
      ],
    },
    "exports": [
      {
        "kind": "fragment",
        "selections": [
          {
            "inlineVariables": {},
            "kind": "scalar",
            "name": "id",
            "ofType": "ID",
            "path": "products.id",
            "type": "ID!",
          },
        ],
        "typeCondition": "Toaster",
      },
      {
        "kind": "fragment",
        "selections": [
          {
            "kind": "scalar",
            "name": "id",
          },
        ],
        "typeCondition": "Toaster",
      },
      {
        "kind": "fragment",
        "selections": [
          {
            "inlineVariables": {},
            "kind": "scalar",
            "name": "id",
            "ofType": "ID",
            "path": "products.id",
            "type": "ID!",
          },
        ],
        "typeCondition": "Oven",
      },
      {
        "kind": "fragment",
        "selections": [
          {
            "kind": "scalar",
            "name": "id",
          },
        ],
        "typeCondition": "Oven",
      },
    ],
    "includes": [],
    "kind": "interface",
    "ofType": "Product",
    "operation": "{
  products {
    ... on Toaster {
      id
    }
    ... on Toaster {
      id
    }
    ... on Oven {
      id
    }
    ... on Oven {
      id
    }
  }
}",
    "pathInData": [
      "products",
    ],
    "pathToExportData": [
      "products",
    ],
    "subgraph": "a",
    "type": "[Product]",
    "variables": {},
  },
]
`;

exports[`fixture 'federation/union-interface-distributed' > query 'ProductsNodeFragmentId' > should plan gather 1`] = `
{
  "operation": {
    "name": "ProductsNodeFragmentId",
    "resolvers": {
      "products": {
        "exports": [
          {
            "kind": "fragment",
            "selections": [
              {
                "inlineVariables": {},
                "kind": "scalar",
                "name": "id",
                "ofType": "ID",
                "path": "products.id",
                "type": "ID!",
              },
            ],
            "typeCondition": "Toaster",
          },
          {
            "kind": "fragment",
            "selections": [
              {
                "kind": "scalar",
                "name": "id",
              },
            ],
            "typeCondition": "Toaster",
          },
          {
            "kind": "fragment",
            "selections": [
              {
                "inlineVariables": {},
                "kind": "scalar",
                "name": "id",
                "ofType": "ID",
                "path": "products.id",
                "type": "ID!",
              },
            ],
            "typeCondition": "Oven",
          },
          {
            "kind": "fragment",
            "selections": [
              {
                "kind": "scalar",
                "name": "id",
              },
            ],
            "typeCondition": "Oven",
          },
        ],
        "includes": {},
        "kind": "interface",
        "ofType": "Product",
        "operation": "{
  products {
    ... on Toaster {
      id
    }
    ... on Toaster {
      id
    }
    ... on Oven {
      id
    }
    ... on Oven {
      id
    }
  }
}",
        "pathToExportData": [
          "products",
        ],
        "subgraph": "a",
        "type": "[Product]",
        "variables": {},
      },
    },
    "type": "Query",
  },
  "query": "query ProductsNodeFragmentId {
  products {
    ... on Node {
      id
    }
  }
}",
}
`;

exports[`fixture 'federation/union-interface-distributed' > query 'Warranty' > should execute and explain 1`] = `
[
  {
    "data": {
      "node": {
        "warranty": 3,
      },
    },
    "exports": [
      {
        "kind": "fragment",
        "selections": [
          {
            "kind": "scalar",
            "name": "warranty",
          },
        ],
        "typeCondition": "Toaster",
      },
    ],
    "includes": [],
    "kind": "interface",
    "ofType": "Node",
    "operation": "query ($id: ID!) {
  node(id: $id) {
    ... on Toaster {
      warranty
    }
  }
}",
    "pathInData": [
      "node",
    ],
    "pathToExportData": [
      "node",
    ],
    "subgraph": "a",
    "type": "Node",
    "variables": {
      "id": "toaster1",
    },
  },
]
`;

exports[`fixture 'federation/union-interface-distributed' > query 'Warranty' > should plan gather 1`] = `
{
  "operation": {
    "name": "Warranty",
    "resolvers": {
      "node": {
        "exports": [
          {
            "kind": "fragment",
            "selections": [
              {
                "kind": "scalar",
                "name": "warranty",
              },
            ],
            "typeCondition": "Toaster",
          },
        ],
        "includes": {},
        "kind": "interface",
        "ofType": "Node",
        "operation": "query ($id: ID!) {
  node(id: $id) {
    ... on Toaster {
      warranty
    }
  }
}",
        "pathToExportData": [
          "node",
        ],
        "subgraph": "a",
        "type": "Node",
        "variables": {
          "id": {
            "kind": "constant",
            "name": "id",
            "value": "toaster1",
          },
        },
      },
    },
    "type": "Query",
  },
  "query": "query Warranty {
  node(id: "toaster1") {
    ... on Toaster {
      warranty
    }
  }
}",
}
`;

exports[`fixture 'federation/union-intersection' > query 'AllMedia' > should execute and explain 1`] = `
[
  {
    "data": {
      "media": {
        "__typename": "Book",
        "title": "The Lord of the Rings",
      },
    },
    "exports": [
      {
        "kind": "scalar",
        "name": "__typename",
      },
      {
        "kind": "fragment",
        "selections": [
          {
            "kind": "scalar",
            "name": "title",
          },
        ],
        "typeCondition": "Book",
      },
    ],
    "includes": [],
    "kind": "interface",
    "ofType": "Media",
    "operation": "{
  media {
    __typename
    ... on Book {
      title
    }
  }
}",
    "pathInData": [
      "media",
    ],
    "pathToExportData": [
      "media",
    ],
    "subgraph": "a",
    "type": "Media",
    "variables": {},
  },
  {
    "data": {
      "book": {
        "__typename": "Book",
        "title": "The Lord of the Rings",
      },
    },
    "exports": [
      {
        "kind": "scalar",
        "name": "__typename",
      },
      {
        "kind": "scalar",
        "name": "title",
      },
    ],
    "includes": [],
    "kind": "object",
    "ofType": "Book",
    "operation": "{
  book {
    __typename
    title
  }
}",
    "pathInData": [
      "book",
    ],
    "pathToExportData": [
      "book",
    ],
    "subgraph": "a",
    "type": "Book",
    "variables": {},
  },
  {
    "data": {
      "song": {
        "__typename": "Song",
        "title": "Song Title",
      },
    },
    "exports": [
      {
        "kind": "scalar",
        "name": "__typename",
      },
      {
        "kind": "fragment",
        "selections": [
          {
            "kind": "scalar",
            "name": "title",
          },
        ],
        "typeCondition": "Song",
      },
      {
        "kind": "fragment",
        "selections": [
          {
            "kind": "scalar",
            "name": "title",
          },
        ],
        "typeCondition": "Book",
      },
    ],
    "includes": [],
    "kind": "interface",
    "ofType": "Media",
    "operation": "{
  song {
    __typename
    ... on Song {
      title
    }
    ... on Book {
      title
    }
  }
}",
    "pathInData": [
      "song",
    ],
    "pathToExportData": [
      "song",
    ],
    "subgraph": "a",
    "type": "Media",
    "variables": {},
  },
]
`;

exports[`fixture 'federation/union-intersection' > query 'AllMedia' > should plan gather 1`] = `
{
  "operation": {
    "name": "AllMedia",
    "resolvers": {
      "book": {
        "exports": [
          {
            "kind": "scalar",
            "name": "__typename",
          },
          {
            "kind": "scalar",
            "name": "title",
          },
        ],
        "includes": {},
        "kind": "object",
        "ofType": "Book",
        "operation": "{
  book {
    __typename
    title
  }
}",
        "pathToExportData": [
          "book",
        ],
        "subgraph": "a",
        "type": "Book",
        "variables": {},
      },
      "media": {
        "exports": [
          {
            "kind": "scalar",
            "name": "__typename",
          },
          {
            "kind": "fragment",
            "selections": [
              {
                "kind": "scalar",
                "name": "title",
              },
            ],
            "typeCondition": "Book",
          },
        ],
        "includes": {},
        "kind": "interface",
        "ofType": "Media",
        "operation": "{
  media {
    __typename
    ... on Book {
      title
    }
  }
}",
        "pathToExportData": [
          "media",
        ],
        "subgraph": "a",
        "type": "Media",
        "variables": {},
      },
      "song": {
        "exports": [
          {
            "kind": "scalar",
            "name": "__typename",
          },
          {
            "kind": "fragment",
            "selections": [
              {
                "kind": "scalar",
                "name": "title",
              },
            ],
            "typeCondition": "Song",
          },
          {
            "kind": "fragment",
            "selections": [
              {
                "kind": "scalar",
                "name": "title",
              },
            ],
            "typeCondition": "Book",
          },
        ],
        "includes": {},
        "kind": "interface",
        "ofType": "Media",
        "operation": "{
  song {
    __typename
    ... on Song {
      title
    }
    ... on Book {
      title
    }
  }
}",
        "pathToExportData": [
          "song",
        ],
        "subgraph": "a",
        "type": "Media",
        "variables": {},
      },
    },
    "type": "Query",
  },
  "query": "query AllMedia {
  media {
    __typename
    ... on Song {
      title
    }
    ... on Movie {
      title
    }
    ... on Book {
      title
    }
  }
  book {
    __typename
    ... on Song {
      title
    }
    ... on Movie {
      title
    }
    ... on Book {
      title
    }
  }
  song {
    __typename
    ... on Song {
      title
    }
    ... on Movie {
      title
    }
    ... on Book {
      title
    }
  }
}",
}
`;

exports[`fixture 'federation/union-intersection' > query 'BookAll' > should execute and explain 1`] = `
[
  {
    "data": {
      "book": {
        "__typename": "Book",
        "title": "The Lord of the Rings",
      },
    },
    "exports": [
      {
        "kind": "scalar",
        "name": "__typename",
      },
      {
        "kind": "scalar",
        "name": "title",
      },
    ],
    "includes": [],
    "kind": "object",
    "ofType": "Book",
    "operation": "{
  book {
    __typename
    title
  }
}",
    "pathInData": [
      "book",
    ],
    "pathToExportData": [
      "book",
    ],
    "subgraph": "a",
    "type": "Book",
    "variables": {},
  },
]
`;

exports[`fixture 'federation/union-intersection' > query 'BookAll' > should plan gather 1`] = `
{
  "operation": {
    "name": "BookAll",
    "resolvers": {
      "book": {
        "exports": [
          {
            "kind": "scalar",
            "name": "__typename",
          },
          {
            "kind": "scalar",
            "name": "title",
          },
        ],
        "includes": {},
        "kind": "object",
        "ofType": "Book",
        "operation": "{
  book {
    __typename
    title
  }
}",
        "pathToExportData": [
          "book",
        ],
        "subgraph": "a",
        "type": "Book",
        "variables": {},
      },
    },
    "type": "Query",
  },
  "query": "query BookAll {
  book {
    __typename
    ... on Song {
      title
    }
    ... on Movie {
      title
    }
    ... on Book {
      title
    }
  }
}",
}
`;

exports[`fixture 'federation/union-intersection' > query 'MediaAll' > should execute and explain 1`] = `
[
  {
    "data": {
      "media": {
        "__typename": "Book",
        "title": "The Lord of the Rings",
      },
    },
    "exports": [
      {
        "kind": "scalar",
        "name": "__typename",
      },
      {
        "kind": "fragment",
        "selections": [
          {
            "kind": "scalar",
            "name": "title",
          },
        ],
        "typeCondition": "Book",
      },
    ],
    "includes": [],
    "kind": "interface",
    "ofType": "Media",
    "operation": "{
  media {
    __typename
    ... on Book {
      title
    }
  }
}",
    "pathInData": [
      "media",
    ],
    "pathToExportData": [
      "media",
    ],
    "subgraph": "a",
    "type": "Media",
    "variables": {},
  },
]
`;

exports[`fixture 'federation/union-intersection' > query 'MediaAll' > should plan gather 1`] = `
{
  "operation": {
    "name": "MediaAll",
    "resolvers": {
      "media": {
        "exports": [
          {
            "kind": "scalar",
            "name": "__typename",
          },
          {
            "kind": "fragment",
            "selections": [
              {
                "kind": "scalar",
                "name": "title",
              },
            ],
            "typeCondition": "Book",
          },
        ],
        "includes": {},
        "kind": "interface",
        "ofType": "Media",
        "operation": "{
  media {
    __typename
    ... on Book {
      title
    }
  }
}",
        "pathToExportData": [
          "media",
        ],
        "subgraph": "a",
        "type": "Media",
        "variables": {},
      },
    },
    "type": "Query",
  },
  "query": "query MediaAll {
  media {
    __typename
    ... on Song {
      title
    }
    ... on Movie {
      title
    }
    ... on Book {
      title
    }
  }
}",
}
`;

exports[`fixture 'federation/union-intersection' > query 'MediaBook' > should execute and explain 1`] = `
[
  {
    "data": {
      "media": {
        "title": "The Lord of the Rings",
      },
    },
    "exports": [
      {
        "kind": "fragment",
        "selections": [
          {
            "kind": "scalar",
            "name": "title",
          },
        ],
        "typeCondition": "Book",
      },
    ],
    "includes": [],
    "kind": "interface",
    "ofType": "Media",
    "operation": "{
  media {
    ... on Book {
      title
    }
  }
}",
    "pathInData": [
      "media",
    ],
    "pathToExportData": [
      "media",
    ],
    "subgraph": "a",
    "type": "Media",
    "variables": {},
  },
]
`;

exports[`fixture 'federation/union-intersection' > query 'MediaBook' > should plan gather 1`] = `
{
  "operation": {
    "name": "MediaBook",
    "resolvers": {
      "media": {
        "exports": [
          {
            "kind": "fragment",
            "selections": [
              {
                "kind": "scalar",
                "name": "title",
              },
            ],
            "typeCondition": "Book",
          },
        ],
        "includes": {},
        "kind": "interface",
        "ofType": "Media",
        "operation": "{
  media {
    ... on Book {
      title
    }
  }
}",
        "pathToExportData": [
          "media",
        ],
        "subgraph": "a",
        "type": "Media",
        "variables": {},
      },
    },
    "type": "Query",
  },
  "query": "query MediaBook {
  media {
    ... on Book {
      title
    }
  }
}",
}
`;

exports[`fixture 'federation/union-intersection' > query 'MediaBookMovie' > should execute and explain 1`] = `
[
  {
    "data": {
      "media": {
        "title": "The Lord of the Rings",
      },
    },
    "exports": [
      {
        "kind": "fragment",
        "selections": [
          {
            "kind": "scalar",
            "name": "title",
          },
        ],
        "typeCondition": "Book",
      },
    ],
    "includes": [],
    "kind": "interface",
    "ofType": "Media",
    "operation": "{
  media {
    ... on Book {
      title
    }
  }
}",
    "pathInData": [
      "media",
    ],
    "pathToExportData": [
      "media",
    ],
    "subgraph": "a",
    "type": "Media",
    "variables": {},
  },
]
`;

exports[`fixture 'federation/union-intersection' > query 'MediaBookMovie' > should plan gather 1`] = `
{
  "operation": {
    "name": "MediaBookMovie",
    "resolvers": {
      "media": {
        "exports": [
          {
            "kind": "fragment",
            "selections": [
              {
                "kind": "scalar",
                "name": "title",
              },
            ],
            "typeCondition": "Book",
          },
        ],
        "includes": {},
        "kind": "interface",
        "ofType": "Media",
        "operation": "{
  media {
    ... on Book {
      title
    }
  }
}",
        "pathToExportData": [
          "media",
        ],
        "subgraph": "a",
        "type": "Media",
        "variables": {},
      },
    },
    "type": "Query",
  },
  "query": "query MediaBookMovie {
  media {
    ... on Book {
      title
    }
    ... on Movie {
      title
    }
  }
}",
}
`;

exports[`fixture 'federation/union-intersection' > query 'MediaMovie' > should execute and explain 1`] = `
[
  {
    "data": {
      "media": {
        "__typename": "Book",
      },
    },
    "exports": [
      {
        "kind": "scalar",
        "name": "__typename",
        "private": true,
      },
    ],
    "includes": [],
    "kind": "interface",
    "ofType": "Media",
    "operation": "{
  media {
    __typename
  }
}",
    "pathInData": [
      "media",
    ],
    "pathToExportData": [
      "media",
    ],
    "subgraph": "a",
    "type": "Media",
    "variables": {},
  },
]
`;

exports[`fixture 'federation/union-intersection' > query 'MediaMovie' > should plan gather 1`] = `
{
  "operation": {
    "name": "MediaMovie",
    "resolvers": {
      "media": {
        "exports": [
          {
            "kind": "scalar",
            "name": "__typename",
            "private": true,
          },
        ],
        "includes": {},
        "kind": "interface",
        "ofType": "Media",
        "operation": "{
  media {
    __typename
  }
}",
        "pathToExportData": [
          "media",
        ],
        "subgraph": "a",
        "type": "Media",
        "variables": {},
      },
    },
    "type": "Query",
  },
  "query": "query MediaMovie {
  media {
    ... on Movie {
      title
    }
  }
}",
}
`;

exports[`fixture 'federation/union-intersection' > query 'MediaTypename' > should execute and explain 1`] = `
[
  {
    "data": {
      "media": {
        "__typename": "Book",
      },
    },
    "exports": [
      {
        "kind": "scalar",
        "name": "__typename",
      },
    ],
    "includes": [],
    "kind": "interface",
    "ofType": "Media",
    "operation": "{
  media {
    __typename
  }
}",
    "pathInData": [
      "media",
    ],
    "pathToExportData": [
      "media",
    ],
    "subgraph": "a",
    "type": "Media",
    "variables": {},
  },
]
`;

exports[`fixture 'federation/union-intersection' > query 'MediaTypename' > should plan gather 1`] = `
{
  "operation": {
    "name": "MediaTypename",
    "resolvers": {
      "media": {
        "exports": [
          {
            "kind": "scalar",
            "name": "__typename",
          },
        ],
        "includes": {},
        "kind": "interface",
        "ofType": "Media",
        "operation": "{
  media {
    __typename
  }
}",
        "pathToExportData": [
          "media",
        ],
        "subgraph": "a",
        "type": "Media",
        "variables": {},
      },
    },
    "type": "Query",
  },
  "query": "query MediaTypename {
  media {
    __typename
  }
}",
}
`;

exports[`fixture 'federation/union-intersection' > query 'ViewerAllAll' > should execute and explain 1`] = `
[
  {
    "data": {
      "viewer": {
        "book": {
          "__typename": "Book",
          "title": "The Lord of the Rings",
        },
        "media": {
          "__typename": "Book",
          "title": "The Lord of the Rings",
        },
        "song": {
          "__typename": "Song",
          "title": "Song Title",
        },
      },
    },
    "exports": [
      {
        "kind": "object",
        "name": "media",
        "selections": [
          {
            "kind": "scalar",
            "name": "__typename",
          },
          {
            "kind": "fragment",
            "selections": [
              {
                "kind": "scalar",
                "name": "title",
              },
            ],
            "typeCondition": "Book",
          },
        ],
      },
      {
        "kind": "object",
        "name": "book",
        "selections": [
          {
            "kind": "scalar",
            "name": "__typename",
          },
          {
            "kind": "fragment",
            "selections": [
              {
                "kind": "scalar",
                "name": "title",
              },
            ],
            "typeCondition": "Book",
          },
        ],
      },
      {
        "kind": "object",
        "name": "song",
        "selections": [
          {
            "kind": "scalar",
            "name": "__typename",
          },
          {
            "kind": "fragment",
            "selections": [
              {
                "kind": "scalar",
                "name": "title",
              },
            ],
            "typeCondition": "Song",
          },
          {
            "kind": "fragment",
            "selections": [
              {
                "kind": "scalar",
                "name": "title",
              },
            ],
            "typeCondition": "Book",
          },
        ],
      },
    ],
    "includes": [],
    "kind": "object",
    "ofType": "Viewer",
    "operation": "{
  viewer {
    media {
      __typename
      ... on Book {
        title
      }
    }
    book {
      __typename
      ... on Book {
        title
      }
    }
    song {
      __typename
      ... on Song {
        title
      }
      ... on Book {
        title
      }
    }
  }
}",
    "pathInData": [
      "viewer",
    ],
    "pathToExportData": [
      "viewer",
    ],
    "subgraph": "a",
    "type": "Viewer",
    "variables": {},
  },
]
`;

exports[`fixture 'federation/union-intersection' > query 'ViewerAllAll' > should plan gather 1`] = `
{
  "operation": {
    "name": "ViewerMediaAll",
    "resolvers": {
      "viewer": {
        "exports": [
          {
            "kind": "object",
            "name": "media",
            "selections": [
              {
                "kind": "scalar",
                "name": "__typename",
              },
              {
                "kind": "fragment",
                "selections": [
                  {
                    "kind": "scalar",
                    "name": "title",
                  },
                ],
                "typeCondition": "Book",
              },
            ],
          },
          {
            "kind": "object",
            "name": "book",
            "selections": [
              {
                "kind": "scalar",
                "name": "__typename",
              },
              {
                "kind": "fragment",
                "selections": [
                  {
                    "kind": "scalar",
                    "name": "title",
                  },
                ],
                "typeCondition": "Book",
              },
            ],
          },
          {
            "kind": "object",
            "name": "song",
            "selections": [
              {
                "kind": "scalar",
                "name": "__typename",
              },
              {
                "kind": "fragment",
                "selections": [
                  {
                    "kind": "scalar",
                    "name": "title",
                  },
                ],
                "typeCondition": "Song",
              },
              {
                "kind": "fragment",
                "selections": [
                  {
                    "kind": "scalar",
                    "name": "title",
                  },
                ],
                "typeCondition": "Book",
              },
            ],
          },
        ],
        "includes": {},
        "kind": "object",
        "ofType": "Viewer",
        "operation": "{
  viewer {
    media {
      __typename
      ... on Book {
        title
      }
    }
    book {
      __typename
      ... on Book {
        title
      }
    }
    song {
      __typename
      ... on Song {
        title
      }
      ... on Book {
        title
      }
    }
  }
}",
        "pathToExportData": [
          "viewer",
        ],
        "subgraph": "a",
        "type": "Viewer",
        "variables": {},
      },
    },
    "type": "Query",
  },
  "query": "query ViewerMediaAll {
  viewer {
    media {
      __typename
      ... on Song {
        title
      }
      ... on Movie {
        title
      }
      ... on Book {
        title
      }
    }
    book {
      __typename
      ... on Song {
        title
      }
      ... on Movie {
        title
      }
      ... on Book {
        title
      }
    }
    song {
      __typename
      ... on Song {
        title
      }
      ... on Movie {
        title
      }
      ... on Book {
        title
      }
    }
  }
}",
}
`;

exports[`fixture 'federation/union-intersection' > query 'ViewerMediaAll' > should execute and explain 1`] = `
[
  {
    "data": {
      "viewer": {
        "media": {
          "__typename": "Book",
          "title": "The Lord of the Rings",
        },
      },
    },
    "exports": [
      {
        "kind": "object",
        "name": "media",
        "selections": [
          {
            "kind": "scalar",
            "name": "__typename",
          },
          {
            "kind": "fragment",
            "selections": [
              {
                "kind": "scalar",
                "name": "title",
              },
            ],
            "typeCondition": "Book",
          },
        ],
      },
    ],
    "includes": [],
    "kind": "object",
    "ofType": "Viewer",
    "operation": "{
  viewer {
    media {
      __typename
      ... on Book {
        title
      }
    }
  }
}",
    "pathInData": [
      "viewer",
    ],
    "pathToExportData": [
      "viewer",
    ],
    "subgraph": "a",
    "type": "Viewer",
    "variables": {},
  },
]
`;

exports[`fixture 'federation/union-intersection' > query 'ViewerMediaAll' > should plan gather 1`] = `
{
  "operation": {
    "name": "ViewerMediaAll",
    "resolvers": {
      "viewer": {
        "exports": [
          {
            "kind": "object",
            "name": "media",
            "selections": [
              {
                "kind": "scalar",
                "name": "__typename",
              },
              {
                "kind": "fragment",
                "selections": [
                  {
                    "kind": "scalar",
                    "name": "title",
                  },
                ],
                "typeCondition": "Book",
              },
            ],
          },
        ],
        "includes": {},
        "kind": "object",
        "ofType": "Viewer",
        "operation": "{
  viewer {
    media {
      __typename
      ... on Book {
        title
      }
    }
  }
}",
        "pathToExportData": [
          "viewer",
        ],
        "subgraph": "a",
        "type": "Viewer",
        "variables": {},
      },
    },
    "type": "Query",
  },
  "query": "query ViewerMediaAll {
  viewer {
    media {
      __typename
      ... on Book {
        title
      }
      ... on Song {
        title
      }
      ... on Movie {
        title
      }
    }
  }
}",
}
`;

exports[`fixture 'federation/union-intersection' > query 'ViewerMediaMovie' > should execute and explain 1`] = `
[
  {
    "data": {
      "viewer": {
        "media": {
          "__typename": "Book",
        },
      },
    },
    "exports": [
      {
        "kind": "object",
        "name": "media",
        "selections": [
          {
            "kind": "scalar",
            "name": "__typename",
            "private": true,
          },
        ],
      },
    ],
    "includes": [],
    "kind": "object",
    "ofType": "Viewer",
    "operation": "{
  viewer {
    media {
      __typename
    }
  }
}",
    "pathInData": [
      "viewer",
    ],
    "pathToExportData": [
      "viewer",
    ],
    "subgraph": "a",
    "type": "Viewer",
    "variables": {},
  },
]
`;

exports[`fixture 'federation/union-intersection' > query 'ViewerMediaMovie' > should plan gather 1`] = `
{
  "operation": {
    "name": "ViewerMediaMovie",
    "resolvers": {
      "viewer": {
        "exports": [
          {
            "kind": "object",
            "name": "media",
            "selections": [
              {
                "kind": "scalar",
                "name": "__typename",
                "private": true,
              },
            ],
          },
        ],
        "includes": {},
        "kind": "object",
        "ofType": "Viewer",
        "operation": "{
  viewer {
    media {
      __typename
    }
  }
}",
        "pathToExportData": [
          "viewer",
        ],
        "subgraph": "a",
        "type": "Viewer",
        "variables": {},
      },
    },
    "type": "Query",
  },
  "query": "query ViewerMediaMovie {
  viewer {
    media {
      ... on Movie {
        title
      }
    }
  }
}",
}
`;

exports[`fixture 'interfaces' > query 'BasicCat' > should execute and explain 1`] = `
[
  {
    "data": {
      "animal": {
        "meows": true,
        "name": "Cathew",
        "type": "cat",
      },
    },
    "exports": [
      {
        "kind": "scalar",
        "name": "name",
      },
      {
        "kind": "scalar",
        "name": "type",
      },
      {
        "kind": "fragment",
        "selections": [
          {
            "kind": "scalar",
            "name": "meows",
          },
        ],
        "typeCondition": "Cat",
      },
    ],
    "includes": [],
    "kind": "interface",
    "ofType": "Animal",
    "operation": "query animal($name: ID!) {
  animal(name: $name) {
    name
    type
    ... on Cat {
      meows
    }
  }
}",
    "pathInData": [
      "animal",
    ],
    "pathToExportData": [
      "animal",
    ],
    "subgraph": "shelter",
    "type": "Animal",
    "variables": {
      "name": "Cathew",
    },
  },
]
`;

exports[`fixture 'interfaces' > query 'BasicCat' > should plan gather 1`] = `
{
  "operation": {
    "name": "BasicCat",
    "resolvers": {
      "animal": {
        "exports": [
          {
            "kind": "scalar",
            "name": "name",
          },
          {
            "kind": "scalar",
            "name": "type",
          },
          {
            "kind": "fragment",
            "selections": [
              {
                "kind": "scalar",
                "name": "meows",
              },
            ],
            "typeCondition": "Cat",
          },
        ],
        "includes": {},
        "kind": "interface",
        "ofType": "Animal",
        "operation": "query animal($name: ID!) {
  animal(name: $name) {
    name
    type
    ... on Cat {
      meows
    }
  }
}",
        "pathToExportData": [
          "animal",
        ],
        "subgraph": "shelter",
        "type": "Animal",
        "variables": {
          "name": {
            "kind": "constant",
            "name": "name",
            "value": "Cathew",
          },
        },
      },
    },
    "type": "Query",
  },
  "query": "query BasicCat {
  animal(name: "Cathew") {
    name
    type
    ... on Cat {
      meows
    }
  }
}",
}
`;

exports[`fixture 'interfaces' > query 'BasicNestedAnimal' > should execute and explain 1`] = `
[
  {
    "data": {
      "animal": {
        "barks": true,
        "bestFriend": {
          "meows": true,
          "name": "Cathew",
        },
        "name": "Dogeth",
        "type": "dog",
      },
    },
    "exports": [
      {
        "kind": "scalar",
        "name": "name",
      },
      {
        "kind": "scalar",
        "name": "type",
      },
      {
        "kind": "fragment",
        "selections": [
          {
            "kind": "scalar",
            "name": "barks",
          },
          {
            "kind": "object",
            "name": "bestFriend",
            "selections": [
              {
                "kind": "fragment",
                "selections": [
                  {
                    "kind": "scalar",
                    "name": "meows",
                  },
                  {
                    "kind": "scalar",
                    "name": "name",
                  },
                ],
                "typeCondition": "Cat",
              },
            ],
          },
        ],
        "typeCondition": "Dog",
      },
    ],
    "includes": [],
    "kind": "interface",
    "ofType": "Animal",
    "operation": "query animal($name: ID!) {
  animal(name: $name) {
    name
    type
    ... on Dog {
      barks
      bestFriend {
        ... on Cat {
          meows
          name
        }
      }
    }
  }
}",
    "pathInData": [
      "animal",
    ],
    "pathToExportData": [
      "animal",
    ],
    "subgraph": "shelter",
    "type": "Animal",
    "variables": {
      "name": "Dogeth",
    },
  },
]
`;

exports[`fixture 'interfaces' > query 'BasicNestedAnimal' > should plan gather 1`] = `
{
  "operation": {
    "name": "BasicNestedAnimal",
    "resolvers": {
      "animal": {
        "exports": [
          {
            "kind": "scalar",
            "name": "name",
          },
          {
            "kind": "scalar",
            "name": "type",
          },
          {
            "kind": "fragment",
            "selections": [
              {
                "kind": "scalar",
                "name": "barks",
              },
              {
                "kind": "object",
                "name": "bestFriend",
                "selections": [
                  {
                    "kind": "fragment",
                    "selections": [
                      {
                        "kind": "scalar",
                        "name": "meows",
                      },
                      {
                        "kind": "scalar",
                        "name": "name",
                      },
                    ],
                    "typeCondition": "Cat",
                  },
                ],
              },
            ],
            "typeCondition": "Dog",
          },
        ],
        "includes": {},
        "kind": "interface",
        "ofType": "Animal",
        "operation": "query animal($name: ID!) {
  animal(name: $name) {
    name
    type
    ... on Dog {
      barks
      bestFriend {
        ... on Cat {
          meows
          name
        }
      }
    }
  }
}",
        "pathToExportData": [
          "animal",
        ],
        "subgraph": "shelter",
        "type": "Animal",
        "variables": {
          "name": {
            "kind": "constant",
            "name": "name",
            "value": "Dogeth",
          },
        },
      },
    },
    "type": "Query",
  },
  "query": "query BasicNestedAnimal {
  animal(name: "Dogeth") {
    name
    type
    ... on Dog {
      barks
      bestFriend {
        ... on Cat {
          meows
          name
        }
      }
    }
  }
}",
}
`;

exports[`fixture 'store' > query 'BasicWithFragmentDefinition' > should execute and explain 1`] = `
[
  {
    "data": {
      "storefront": {
        "id": "apple-store",
        "name": "Apple Store",
        "products": [
          {
            "upc": "iphone",
          },
          {
            "upc": "ipad",
          },
        ],
      },
    },
    "exports": [
      {
        "kind": "scalar",
        "name": "id",
      },
      {
        "kind": "object",
        "name": "products",
        "selections": [
          {
            "kind": "scalar",
            "name": "upc",
          },
        ],
      },
      {
        "kind": "scalar",
        "name": "name",
      },
    ],
    "includes": [
      {
        "data": {
          "product": {
            "manufacturer": {
              "id": "apple",
            },
          },
        },
        "exports": [
          {
            "kind": "object",
            "name": "manufacturer",
            "selections": [
              {
                "kind": "scalar",
                "name": "id",
              },
            ],
          },
        ],
        "includes": [],
        "kind": "object",
        "ofType": "Product",
        "operation": "query ProductByUpc($Product_upc: ID!) {
  product(upc: $Product_upc) {
    manufacturer {
      id
    }
  }
}",
        "pathInData": [
          "storefront",
          "products",
          0,
        ],
        "pathToExportData": [
          "product",
        ],
        "subgraph": "products",
        "type": "Product",
        "variables": {
          "Product_upc": "iphone",
        },
      },
      {
        "data": {
          "product": {
            "manufacturer": {
              "id": "apple",
            },
          },
        },
        "exports": [
          {
            "kind": "object",
            "name": "manufacturer",
            "selections": [
              {
                "kind": "scalar",
                "name": "id",
              },
            ],
          },
        ],
        "includes": [],
        "kind": "object",
        "ofType": "Product",
        "operation": "query ProductByUpc($Product_upc: ID!) {
  product(upc: $Product_upc) {
    manufacturer {
      id
    }
  }
}",
        "pathInData": [
          "storefront",
          "products",
          1,
        ],
        "pathToExportData": [
          "product",
        ],
        "subgraph": "products",
        "type": "Product",
        "variables": {
          "Product_upc": "ipad",
        },
      },
    ],
    "kind": "object",
    "ofType": "Storefront",
    "operation": "query storefront($id: ID!) {
  storefront(id: $id) {
    id
    products {
      upc
    }
    name
  }
}",
    "pathInData": [
      "storefront",
    ],
    "pathToExportData": [
      "storefront",
    ],
    "subgraph": "storefronts",
    "type": "Storefront",
    "variables": {
      "id": "apple-store",
    },
  },
]
`;

exports[`fixture 'store' > query 'BasicWithFragmentDefinition' > should plan gather 1`] = `
{
  "operation": {
    "name": "BasicWithFragmentDefinition",
    "resolvers": {
      "storefront": {
        "exports": [
          {
            "kind": "scalar",
            "name": "id",
          },
          {
            "kind": "object",
            "name": "products",
            "selections": [
              {
                "kind": "scalar",
                "name": "upc",
              },
            ],
          },
          {
            "kind": "scalar",
            "name": "name",
          },
        ],
        "includes": {
          "products": {
            "exports": [
              {
                "kind": "object",
                "name": "manufacturer",
                "selections": [
                  {
                    "kind": "scalar",
                    "name": "id",
                  },
                ],
              },
            ],
            "includes": {},
            "kind": "object",
            "ofType": "Product",
            "operation": "query ProductByUpc($Product_upc: ID!) {
  product(upc: $Product_upc) {
    manufacturer {
      id
    }
  }
}",
            "pathToExportData": [
              "product",
            ],
            "subgraph": "products",
            "type": "Product",
            "variables": {
              "Product_upc": {
                "kind": "select",
                "name": "Product_upc",
                "select": "upc",
              },
            },
          },
        },
        "kind": "object",
        "ofType": "Storefront",
        "operation": "query storefront($id: ID!) {
  storefront(id: $id) {
    id
    products {
      upc
    }
    name
  }
}",
        "pathToExportData": [
          "storefront",
        ],
        "subgraph": "storefronts",
        "type": "Storefront",
        "variables": {
          "id": {
            "kind": "constant",
            "name": "id",
            "value": "apple-store",
          },
        },
      },
    },
    "type": "Query",
  },
  "query": "query BasicWithFragmentDefinition {
  storefront(id: "apple-store") {
    id
    products {
      ...P
    }
    name
  }
}

fragment P on Product {
  upc
  manufacturer {
    id
  }
}",
}
`;

exports[`fixture 'store' > query 'BasicWithInlineFragment' > should execute and explain 1`] = `
[
  {
    "data": {
      "storefront": {
        "id": "samsung-store",
        "name": "Samsung",
        "products": [
          {
            "upc": "tv",
          },
          {
            "upc": "fold",
          },
          {
            "upc": "galaxy",
          },
        ],
      },
    },
    "exports": [
      {
        "kind": "scalar",
        "name": "id",
      },
      {
        "kind": "scalar",
        "name": "name",
      },
      {
        "kind": "object",
        "name": "products",
        "selections": [
          {
            "kind": "scalar",
            "name": "upc",
          },
        ],
      },
    ],
    "includes": [
      {
        "data": {
          "product": {
            "name": "Samsung TV",
          },
        },
        "exports": [
          {
            "kind": "scalar",
            "name": "name",
          },
        ],
        "includes": [],
        "kind": "object",
        "ofType": "Product",
        "operation": "query ProductByUpc($Product_upc: ID!) {
  product(upc: $Product_upc) {
    name
  }
}",
        "pathInData": [
          "storefront",
          "products",
          0,
        ],
        "pathToExportData": [
          "product",
        ],
        "subgraph": "products",
        "type": "Product",
        "variables": {
          "Product_upc": "tv",
        },
      },
      {
        "data": {
          "product": {
            "name": "Samsung Fold",
          },
        },
        "exports": [
          {
            "kind": "scalar",
            "name": "name",
          },
        ],
        "includes": [],
        "kind": "object",
        "ofType": "Product",
        "operation": "query ProductByUpc($Product_upc: ID!) {
  product(upc: $Product_upc) {
    name
  }
}",
        "pathInData": [
          "storefront",
          "products",
          1,
        ],
        "pathToExportData": [
          "product",
        ],
        "subgraph": "products",
        "type": "Product",
        "variables": {
          "Product_upc": "fold",
        },
      },
      {
        "data": {
          "product": {
            "name": "Samsung Galaxy",
          },
        },
        "exports": [
          {
            "kind": "scalar",
            "name": "name",
          },
        ],
        "includes": [],
        "kind": "object",
        "ofType": "Product",
        "operation": "query ProductByUpc($Product_upc: ID!) {
  product(upc: $Product_upc) {
    name
  }
}",
        "pathInData": [
          "storefront",
          "products",
          2,
        ],
        "pathToExportData": [
          "product",
        ],
        "subgraph": "products",
        "type": "Product",
        "variables": {
          "Product_upc": "galaxy",
        },
      },
    ],
    "kind": "object",
    "ofType": "Storefront",
    "operation": "query storefront($id: ID!) {
  storefront(id: $id) {
    id
    name
    products {
      upc
    }
  }
}",
    "pathInData": [
      "storefront",
    ],
    "pathToExportData": [
      "storefront",
    ],
    "subgraph": "storefronts",
    "type": "Storefront",
    "variables": {
      "id": "samsung-store",
    },
  },
]
`;

exports[`fixture 'store' > query 'BasicWithInlineFragment' > should plan gather 1`] = `
{
  "operation": {
    "name": "BasicWithInlineFragment",
    "resolvers": {
      "storefront": {
        "exports": [
          {
            "kind": "scalar",
            "name": "id",
          },
          {
            "kind": "scalar",
            "name": "name",
          },
          {
            "kind": "object",
            "name": "products",
            "selections": [
              {
                "kind": "scalar",
                "name": "upc",
              },
            ],
          },
        ],
        "includes": {
          "products": {
            "exports": [
              {
                "kind": "scalar",
                "name": "name",
              },
            ],
            "includes": {},
            "kind": "object",
            "ofType": "Product",
            "operation": "query ProductByUpc($Product_upc: ID!) {
  product(upc: $Product_upc) {
    name
  }
}",
            "pathToExportData": [
              "product",
            ],
            "subgraph": "products",
            "type": "Product",
            "variables": {
              "Product_upc": {
                "kind": "select",
                "name": "Product_upc",
                "select": "upc",
              },
            },
          },
        },
        "kind": "object",
        "ofType": "Storefront",
        "operation": "query storefront($id: ID!) {
  storefront(id: $id) {
    id
    name
    products {
      upc
    }
  }
}",
        "pathToExportData": [
          "storefront",
        ],
        "subgraph": "storefronts",
        "type": "Storefront",
        "variables": {
          "id": {
            "kind": "constant",
            "name": "id",
            "value": "samsung-store",
          },
        },
      },
    },
    "type": "Query",
  },
  "query": "query BasicWithInlineFragment {
  storefront(id: "samsung-store") {
    id
    name
    products {
      ... on Product {
        upc
        name
      }
    }
  }
}",
}
`;

exports[`fixture 'store' > query 'ListOperationResolver' > should execute and explain 1`] = `
[
  {
    "data": {
      "productsByUpcs": [
        {
          "manufacturer": {
            "id": "samsung",
            "products": [
              {
                "name": "Samsung TV",
                "upc": "tv",
              },
              {
                "name": "Samsung Fold",
                "upc": "fold",
              },
              {
                "name": "Samsung Galaxy",
                "upc": "galaxy",
              },
            ],
          },
          "name": "Samsung Galaxy",
          "upc": "galaxy",
        },
        {
          "manufacturer": {
            "id": "apple",
            "products": [
              {
                "name": "Apple iPhone",
                "upc": "iphone",
              },
              {
                "name": "iPad",
                "upc": "ipad",
              },
            ],
          },
          "name": "Apple iPhone",
          "upc": "iphone",
        },
      ],
    },
    "exports": [
      {
        "kind": "scalar",
        "name": "upc",
      },
      {
        "kind": "scalar",
        "name": "name",
      },
      {
        "kind": "object",
        "name": "manufacturer",
        "selections": [
          {
            "kind": "object",
            "name": "products",
            "selections": [
              {
                "kind": "scalar",
                "name": "upc",
              },
              {
                "kind": "scalar",
                "name": "name",
              },
            ],
          },
          {
            "kind": "scalar",
            "name": "id",
            "private": true,
          },
        ],
      },
    ],
    "includes": [
      {
        "data": {
          "manufacturer": {
            "name": "Samsung",
          },
        },
        "exports": [
          {
            "kind": "scalar",
            "name": "name",
          },
        ],
        "includes": [],
        "kind": "object",
        "ofType": "Manufacturer",
        "operation": "query ManufacturerById($Manufacturer_id: ID!) {
  manufacturer(id: $Manufacturer_id) {
    name
  }
}",
        "pathInData": [
          "productsByUpcs",
          0,
          "manufacturer",
        ],
        "pathToExportData": [
          "manufacturer",
        ],
        "subgraph": "manufacturers",
        "type": "Manufacturer",
        "variables": {
          "Manufacturer_id": "samsung",
        },
      },
      {
        "data": {
          "manufacturer": {
            "name": "Apple",
          },
        },
        "exports": [
          {
            "kind": "scalar",
            "name": "name",
          },
        ],
        "includes": [],
        "kind": "object",
        "ofType": "Manufacturer",
        "operation": "query ManufacturerById($Manufacturer_id: ID!) {
  manufacturer(id: $Manufacturer_id) {
    name
  }
}",
        "pathInData": [
          "productsByUpcs",
          1,
          "manufacturer",
        ],
        "pathToExportData": [
          "manufacturer",
        ],
        "subgraph": "manufacturers",
        "type": "Manufacturer",
        "variables": {
          "Manufacturer_id": "apple",
        },
      },
    ],
    "kind": "object",
    "ofType": "Product",
    "operation": "query productsByUpcs($upcs: [ID!]!) {
  productsByUpcs(upcs: $upcs) {
    upc
    name
    manufacturer {
      products {
        upc
        name
      }
      id
    }
  }
}",
    "pathInData": [
      "productsByUpcs",
    ],
    "pathToExportData": [
      "productsByUpcs",
    ],
    "subgraph": "products",
    "type": "[Product]!",
    "variables": {
      "upcs": [
        "galaxy",
        "iphone",
      ],
    },
  },
]
`;

exports[`fixture 'store' > query 'ListOperationResolver' > should plan gather 1`] = `
{
  "operation": {
    "name": "ListOperationResolver",
    "resolvers": {
      "productsByUpcs": {
        "exports": [
          {
            "kind": "scalar",
            "name": "upc",
          },
          {
            "kind": "scalar",
            "name": "name",
          },
          {
            "kind": "object",
            "name": "manufacturer",
            "selections": [
              {
                "kind": "object",
                "name": "products",
                "selections": [
                  {
                    "kind": "scalar",
                    "name": "upc",
                  },
                  {
                    "kind": "scalar",
                    "name": "name",
                  },
                ],
              },
              {
                "kind": "scalar",
                "name": "id",
                "private": true,
              },
            ],
          },
        ],
        "includes": {
          "manufacturer": {
            "exports": [
              {
                "kind": "scalar",
                "name": "name",
              },
            ],
            "includes": {},
            "kind": "object",
            "ofType": "Manufacturer",
            "operation": "query ManufacturerById($Manufacturer_id: ID!) {
  manufacturer(id: $Manufacturer_id) {
    name
  }
}",
            "pathToExportData": [
              "manufacturer",
            ],
            "subgraph": "manufacturers",
            "type": "Manufacturer",
            "variables": {
              "Manufacturer_id": {
                "kind": "select",
                "name": "Manufacturer_id",
                "select": "id",
              },
            },
          },
        },
        "kind": "object",
        "ofType": "Product",
        "operation": "query productsByUpcs($upcs: [ID!]!) {
  productsByUpcs(upcs: $upcs) {
    upc
    name
    manufacturer {
      products {
        upc
        name
      }
      id
    }
  }
}",
        "pathToExportData": [
          "productsByUpcs",
        ],
        "subgraph": "products",
        "type": "[Product]!",
        "variables": {
          "upcs": {
            "kind": "constant",
            "name": "upcs",
            "value": [
              "galaxy",
              "iphone",
            ],
          },
        },
      },
    },
    "type": "Query",
  },
  "query": "query ListOperationResolver {
  productsByUpcs(upcs: ["galaxy", "iphone"]) {
    upc
    name
    manufacturer {
      products {
        upc
        name
      }
      name
    }
  }
}",
}
`;

exports[`fixture 'store' > query 'NotBasicWithInlineVariables' > should execute and explain 1`] = `
[
  {
    "data": {
      "storefront": {
        "id": "samsung-store",
        "name": "Samsung",
        "products": [
          {
            "upc": "tv",
          },
          {
            "upc": "fold",
          },
          {
            "upc": "galaxy",
          },
        ],
      },
    },
    "exports": [
      {
        "kind": "scalar",
        "name": "id",
      },
      {
        "kind": "scalar",
        "name": "name",
      },
      {
        "kind": "object",
        "name": "products",
        "selections": [
          {
            "kind": "scalar",
            "name": "upc",
          },
        ],
      },
    ],
    "includes": [
      {
        "data": {
          "product": {
            "manufacturer": {
              "id": "samsung",
              "products": [
                {
                  "name": "Samsung TV",
                  "upc": "tv",
                },
                {
                  "name": "Samsung Fold",
                  "upc": "fold",
                },
                {
                  "name": "Samsung Galaxy",
                  "upc": "galaxy",
                },
              ],
            },
            "name": "Samsung TV",
          },
        },
        "exports": [
          {
            "kind": "scalar",
            "name": "name",
          },
          {
            "kind": "object",
            "name": "manufacturer",
            "selections": [
              {
                "kind": "object",
                "name": "products",
                "selections": [
                  {
                    "kind": "scalar",
                    "name": "upc",
                  },
                  {
                    "kind": "scalar",
                    "name": "name",
                  },
                ],
              },
              {
                "kind": "scalar",
                "name": "id",
                "private": true,
              },
            ],
          },
        ],
        "includes": [
          {
            "data": {
              "manufacturer": {
                "name": "Samsung",
              },
            },
            "exports": [
              {
                "kind": "scalar",
                "name": "name",
              },
            ],
            "includes": [],
            "kind": "object",
            "ofType": "Manufacturer",
            "operation": "query ManufacturerById($Manufacturer_id: ID!) {
  manufacturer(id: $Manufacturer_id) {
    name
  }
}",
            "pathInData": [
              "storefront",
              "products",
              0,
              "manufacturer",
            ],
            "pathToExportData": [
              "manufacturer",
            ],
            "subgraph": "manufacturers",
            "type": "Manufacturer",
            "variables": {
              "Manufacturer_id": "samsung",
            },
          },
        ],
        "kind": "object",
        "ofType": "Product",
        "operation": "query ProductByUpc($Product_upc: ID!) {
  product(upc: $Product_upc) {
    name
    manufacturer {
      products {
        upc
        name
      }
      id
    }
  }
}",
        "pathInData": [
          "storefront",
          "products",
          0,
        ],
        "pathToExportData": [
          "product",
        ],
        "subgraph": "products",
        "type": "Product",
        "variables": {
          "Product_upc": "tv",
        },
      },
      {
        "data": {
          "product": {
            "manufacturer": {
              "id": "samsung",
              "products": [
                {
                  "name": "Samsung TV",
                  "upc": "tv",
                },
                {
                  "name": "Samsung Fold",
                  "upc": "fold",
                },
                {
                  "name": "Samsung Galaxy",
                  "upc": "galaxy",
                },
              ],
            },
            "name": "Samsung Fold",
          },
        },
        "exports": [
          {
            "kind": "scalar",
            "name": "name",
          },
          {
            "kind": "object",
            "name": "manufacturer",
            "selections": [
              {
                "kind": "object",
                "name": "products",
                "selections": [
                  {
                    "kind": "scalar",
                    "name": "upc",
                  },
                  {
                    "kind": "scalar",
                    "name": "name",
                  },
                ],
              },
              {
                "kind": "scalar",
                "name": "id",
                "private": true,
              },
            ],
          },
        ],
        "includes": [
          {
            "data": {
              "manufacturer": {
                "name": "Samsung",
              },
            },
            "exports": [
              {
                "kind": "scalar",
                "name": "name",
              },
            ],
            "includes": [],
            "kind": "object",
            "ofType": "Manufacturer",
            "operation": "query ManufacturerById($Manufacturer_id: ID!) {
  manufacturer(id: $Manufacturer_id) {
    name
  }
}",
            "pathInData": [
              "storefront",
              "products",
              1,
              "manufacturer",
            ],
            "pathToExportData": [
              "manufacturer",
            ],
            "subgraph": "manufacturers",
            "type": "Manufacturer",
            "variables": {
              "Manufacturer_id": "samsung",
            },
          },
        ],
        "kind": "object",
        "ofType": "Product",
        "operation": "query ProductByUpc($Product_upc: ID!) {
  product(upc: $Product_upc) {
    name
    manufacturer {
      products {
        upc
        name
      }
      id
    }
  }
}",
        "pathInData": [
          "storefront",
          "products",
          1,
        ],
        "pathToExportData": [
          "product",
        ],
        "subgraph": "products",
        "type": "Product",
        "variables": {
          "Product_upc": "fold",
        },
      },
      {
        "data": {
          "product": {
            "manufacturer": {
              "id": "samsung",
              "products": [
                {
                  "name": "Samsung TV",
                  "upc": "tv",
                },
                {
                  "name": "Samsung Fold",
                  "upc": "fold",
                },
                {
                  "name": "Samsung Galaxy",
                  "upc": "galaxy",
                },
              ],
            },
            "name": "Samsung Galaxy",
          },
        },
        "exports": [
          {
            "kind": "scalar",
            "name": "name",
          },
          {
            "kind": "object",
            "name": "manufacturer",
            "selections": [
              {
                "kind": "object",
                "name": "products",
                "selections": [
                  {
                    "kind": "scalar",
                    "name": "upc",
                  },
                  {
                    "kind": "scalar",
                    "name": "name",
                  },
                ],
              },
              {
                "kind": "scalar",
                "name": "id",
                "private": true,
              },
            ],
          },
        ],
        "includes": [
          {
            "data": {
              "manufacturer": {
                "name": "Samsung",
              },
            },
            "exports": [
              {
                "kind": "scalar",
                "name": "name",
              },
            ],
            "includes": [],
            "kind": "object",
            "ofType": "Manufacturer",
            "operation": "query ManufacturerById($Manufacturer_id: ID!) {
  manufacturer(id: $Manufacturer_id) {
    name
  }
}",
            "pathInData": [
              "storefront",
              "products",
              2,
              "manufacturer",
            ],
            "pathToExportData": [
              "manufacturer",
            ],
            "subgraph": "manufacturers",
            "type": "Manufacturer",
            "variables": {
              "Manufacturer_id": "samsung",
            },
          },
        ],
        "kind": "object",
        "ofType": "Product",
        "operation": "query ProductByUpc($Product_upc: ID!) {
  product(upc: $Product_upc) {
    name
    manufacturer {
      products {
        upc
        name
      }
      id
    }
  }
}",
        "pathInData": [
          "storefront",
          "products",
          2,
        ],
        "pathToExportData": [
          "product",
        ],
        "subgraph": "products",
        "type": "Product",
        "variables": {
          "Product_upc": "galaxy",
        },
      },
    ],
    "kind": "object",
    "ofType": "Storefront",
    "operation": "query storefront($id: ID!) {
  storefront(id: $id) {
    id
    name
    products {
      upc
    }
  }
}",
    "pathInData": [
      "storefront",
    ],
    "pathToExportData": [
      "storefront",
    ],
    "subgraph": "storefronts",
    "type": "Storefront",
    "variables": {
      "id": "samsung-store",
    },
  },
]
`;

exports[`fixture 'store' > query 'NotBasicWithInlineVariables' > should plan gather 1`] = `
{
  "operation": {
    "name": "NotBasicWithInlineVariables",
    "resolvers": {
      "storefront": {
        "exports": [
          {
            "kind": "scalar",
            "name": "id",
          },
          {
            "kind": "scalar",
            "name": "name",
          },
          {
            "kind": "object",
            "name": "products",
            "selections": [
              {
                "kind": "scalar",
                "name": "upc",
              },
            ],
          },
        ],
        "includes": {
          "products": {
            "exports": [
              {
                "kind": "scalar",
                "name": "name",
              },
              {
                "kind": "object",
                "name": "manufacturer",
                "selections": [
                  {
                    "kind": "object",
                    "name": "products",
                    "selections": [
                      {
                        "kind": "scalar",
                        "name": "upc",
                      },
                      {
                        "kind": "scalar",
                        "name": "name",
                      },
                    ],
                  },
                  {
                    "kind": "scalar",
                    "name": "id",
                    "private": true,
                  },
                ],
              },
            ],
            "includes": {
              "manufacturer": {
                "exports": [
                  {
                    "kind": "scalar",
                    "name": "name",
                  },
                ],
                "includes": {},
                "kind": "object",
                "ofType": "Manufacturer",
                "operation": "query ManufacturerById($Manufacturer_id: ID!) {
  manufacturer(id: $Manufacturer_id) {
    name
  }
}",
                "pathToExportData": [
                  "manufacturer",
                ],
                "subgraph": "manufacturers",
                "type": "Manufacturer",
                "variables": {
                  "Manufacturer_id": {
                    "kind": "select",
                    "name": "Manufacturer_id",
                    "select": "id",
                  },
                },
              },
            },
            "kind": "object",
            "ofType": "Product",
            "operation": "query ProductByUpc($Product_upc: ID!) {
  product(upc: $Product_upc) {
    name
    manufacturer {
      products {
        upc
        name
      }
      id
    }
  }
}",
            "pathToExportData": [
              "product",
            ],
            "subgraph": "products",
            "type": "Product",
            "variables": {
              "Product_upc": {
                "kind": "select",
                "name": "Product_upc",
                "select": "upc",
              },
            },
          },
        },
        "kind": "object",
        "ofType": "Storefront",
        "operation": "query storefront($id: ID!) {
  storefront(id: $id) {
    id
    name
    products {
      upc
    }
  }
}",
        "pathToExportData": [
          "storefront",
        ],
        "subgraph": "storefronts",
        "type": "Storefront",
        "variables": {
          "id": {
            "kind": "constant",
            "name": "id",
            "value": "samsung-store",
          },
        },
      },
    },
    "type": "Query",
  },
  "query": "query NotBasicWithInlineVariables {
  storefront(id: "samsung-store") {
    id
    name
    products {
      upc
      name
      manufacturer {
        products {
          upc
          name
        }
        name
      }
    }
  }
}",
}
`;

exports[`fixture 'store' > query 'NotBasicWithOperationVariables' > should execute and explain 1`] = `
[
  {
    "data": {
      "storefront": {
        "id": "apple-store",
        "name": "Apple Store",
        "products": [
          {
            "upc": "iphone",
          },
          {
            "upc": "ipad",
          },
        ],
      },
    },
    "exports": [
      {
        "kind": "scalar",
        "name": "id",
      },
      {
        "kind": "scalar",
        "name": "name",
      },
      {
        "kind": "object",
        "name": "products",
        "selections": [
          {
            "kind": "scalar",
            "name": "upc",
          },
        ],
      },
    ],
    "includes": [
      {
        "data": {
          "product": {
            "manufacturer": {
              "id": "apple",
              "products": [
                {
                  "name": "Apple iPhone",
                  "upc": "iphone",
                },
                {
                  "name": "iPad",
                  "upc": "ipad",
                },
              ],
            },
            "name": "Apple iPhone",
          },
        },
        "exports": [
          {
            "kind": "scalar",
            "name": "name",
          },
          {
            "kind": "object",
            "name": "manufacturer",
            "selections": [
              {
                "kind": "object",
                "name": "products",
                "selections": [
                  {
                    "kind": "scalar",
                    "name": "upc",
                  },
                  {
                    "kind": "scalar",
                    "name": "name",
                  },
                ],
              },
              {
                "kind": "scalar",
                "name": "id",
                "private": true,
              },
            ],
          },
        ],
        "includes": [
          {
            "data": {
              "manufacturer": {
                "name": "Apple",
              },
            },
            "exports": [
              {
                "kind": "scalar",
                "name": "name",
              },
            ],
            "includes": [],
            "kind": "object",
            "ofType": "Manufacturer",
            "operation": "query ManufacturerById($Manufacturer_id: ID!) {
  manufacturer(id: $Manufacturer_id) {
    name
  }
}",
            "pathInData": [
              "storefront",
              "products",
              0,
              "manufacturer",
            ],
            "pathToExportData": [
              "manufacturer",
            ],
            "subgraph": "manufacturers",
            "type": "Manufacturer",
            "variables": {
              "Manufacturer_id": "apple",
            },
          },
        ],
        "kind": "object",
        "ofType": "Product",
        "operation": "query ProductByUpc($Product_upc: ID!) {
  product(upc: $Product_upc) {
    name
    manufacturer {
      products {
        upc
        name
      }
      id
    }
  }
}",
        "pathInData": [
          "storefront",
          "products",
          0,
        ],
        "pathToExportData": [
          "product",
        ],
        "subgraph": "products",
        "type": "Product",
        "variables": {
          "Product_upc": "iphone",
        },
      },
      {
        "data": {
          "product": {
            "manufacturer": {
              "id": "apple",
              "products": [
                {
                  "name": "Apple iPhone",
                  "upc": "iphone",
                },
                {
                  "name": "iPad",
                  "upc": "ipad",
                },
              ],
            },
            "name": "iPad",
          },
        },
        "exports": [
          {
            "kind": "scalar",
            "name": "name",
          },
          {
            "kind": "object",
            "name": "manufacturer",
            "selections": [
              {
                "kind": "object",
                "name": "products",
                "selections": [
                  {
                    "kind": "scalar",
                    "name": "upc",
                  },
                  {
                    "kind": "scalar",
                    "name": "name",
                  },
                ],
              },
              {
                "kind": "scalar",
                "name": "id",
                "private": true,
              },
            ],
          },
        ],
        "includes": [
          {
            "data": {
              "manufacturer": {
                "name": "Apple",
              },
            },
            "exports": [
              {
                "kind": "scalar",
                "name": "name",
              },
            ],
            "includes": [],
            "kind": "object",
            "ofType": "Manufacturer",
            "operation": "query ManufacturerById($Manufacturer_id: ID!) {
  manufacturer(id: $Manufacturer_id) {
    name
  }
}",
            "pathInData": [
              "storefront",
              "products",
              1,
              "manufacturer",
            ],
            "pathToExportData": [
              "manufacturer",
            ],
            "subgraph": "manufacturers",
            "type": "Manufacturer",
            "variables": {
              "Manufacturer_id": "apple",
            },
          },
        ],
        "kind": "object",
        "ofType": "Product",
        "operation": "query ProductByUpc($Product_upc: ID!) {
  product(upc: $Product_upc) {
    name
    manufacturer {
      products {
        upc
        name
      }
      id
    }
  }
}",
        "pathInData": [
          "storefront",
          "products",
          1,
        ],
        "pathToExportData": [
          "product",
        ],
        "subgraph": "products",
        "type": "Product",
        "variables": {
          "Product_upc": "ipad",
        },
      },
    ],
    "kind": "object",
    "ofType": "Storefront",
    "operation": "query storefront($id: ID!) {
  storefront(id: $id) {
    id
    name
    products {
      upc
    }
  }
}",
    "pathInData": [
      "storefront",
    ],
    "pathToExportData": [
      "storefront",
    ],
    "subgraph": "storefronts",
    "type": "Storefront",
    "variables": {
      "id": "apple-store",
    },
  },
]
`;

exports[`fixture 'store' > query 'NotBasicWithOperationVariables' > should plan gather 1`] = `
{
  "operation": {
    "name": "NotBasicWithOperationVariables",
    "resolvers": {
      "storefront": {
        "exports": [
          {
            "kind": "scalar",
            "name": "id",
          },
          {
            "kind": "scalar",
            "name": "name",
          },
          {
            "kind": "object",
            "name": "products",
            "selections": [
              {
                "kind": "scalar",
                "name": "upc",
              },
            ],
          },
        ],
        "includes": {
          "products": {
            "exports": [
              {
                "kind": "scalar",
                "name": "name",
              },
              {
                "kind": "object",
                "name": "manufacturer",
                "selections": [
                  {
                    "kind": "object",
                    "name": "products",
                    "selections": [
                      {
                        "kind": "scalar",
                        "name": "upc",
                      },
                      {
                        "kind": "scalar",
                        "name": "name",
                      },
                    ],
                  },
                  {
                    "kind": "scalar",
                    "name": "id",
                    "private": true,
                  },
                ],
              },
            ],
            "includes": {
              "manufacturer": {
                "exports": [
                  {
                    "kind": "scalar",
                    "name": "name",
                  },
                ],
                "includes": {},
                "kind": "object",
                "ofType": "Manufacturer",
                "operation": "query ManufacturerById($Manufacturer_id: ID!) {
  manufacturer(id: $Manufacturer_id) {
    name
  }
}",
                "pathToExportData": [
                  "manufacturer",
                ],
                "subgraph": "manufacturers",
                "type": "Manufacturer",
                "variables": {
                  "Manufacturer_id": {
                    "kind": "select",
                    "name": "Manufacturer_id",
                    "select": "id",
                  },
                },
              },
            },
            "kind": "object",
            "ofType": "Product",
            "operation": "query ProductByUpc($Product_upc: ID!) {
  product(upc: $Product_upc) {
    name
    manufacturer {
      products {
        upc
        name
      }
      id
    }
  }
}",
            "pathToExportData": [
              "product",
            ],
            "subgraph": "products",
            "type": "Product",
            "variables": {
              "Product_upc": {
                "kind": "select",
                "name": "Product_upc",
                "select": "upc",
              },
            },
          },
        },
        "kind": "object",
        "ofType": "Storefront",
        "operation": "query storefront($id: ID!) {
  storefront(id: $id) {
    id
    name
    products {
      upc
    }
  }
}",
        "pathToExportData": [
          "storefront",
        ],
        "subgraph": "storefronts",
        "type": "Storefront",
        "variables": {
          "id": {
            "kind": "user",
            "name": "id",
          },
        },
      },
    },
    "type": "Query",
  },
  "query": "query NotBasicWithOperationVariables($id: ID!) {
  storefront(id: $id) {
    id
    name
    products {
      upc
      name
      manufacturer {
        products {
          upc
          name
        }
        name
      }
    }
  }
}",
}
`;

exports[`fixture 'store' > query 'ScalarListInOperation' > should execute and explain 1`] = `
[
  {
    "data": {
      "productNames": [
        "Samsung TV",
        "Samsung Fold",
        "Samsung Galaxy",
        "Apple iPhone",
        "iPad",
      ],
    },
    "kind": "scalar",
    "ofType": "String",
    "operation": "query productNames {
  productNames
}",
    "pathInData": [
      "productNames",
    ],
    "pathToExportData": [
      "productNames",
    ],
    "subgraph": "products",
    "type": "[String!]!",
    "variables": {},
  },
]
`;

exports[`fixture 'store' > query 'ScalarListInOperation' > should plan gather 1`] = `
{
  "operation": {
    "name": "ScalarListInOperation",
    "resolvers": {
      "productNames": {
        "kind": "scalar",
        "ofType": "String",
        "operation": "query productNames {
  productNames
}",
        "pathToExportData": [
          "productNames",
        ],
        "subgraph": "products",
        "type": "[String!]!",
        "variables": {},
      },
    },
    "type": "Query",
  },
  "query": "query ScalarListInOperation {
  productNames
}",
}
`;

exports[`fixture 'store' > query 'ScalarListInType' > should execute and explain 1`] = `
[
  {
    "data": {
      "storefront": {
        "productNames": [
          "Apple iPhone",
          "iPad",
        ],
      },
    },
    "exports": [
      {
        "kind": "scalar",
        "name": "productNames",
      },
    ],
    "includes": [],
    "kind": "object",
    "ofType": "Storefront",
    "operation": "query storefront($id: ID!) {
  storefront(id: $id) {
    productNames
  }
}",
    "pathInData": [
      "storefront",
    ],
    "pathToExportData": [
      "storefront",
    ],
    "subgraph": "storefronts",
    "type": "Storefront",
    "variables": {
      "id": "apple-store",
    },
  },
]
`;

exports[`fixture 'store' > query 'ScalarListInType' > should plan gather 1`] = `
{
  "operation": {
    "name": "ScalarListInType",
    "resolvers": {
      "storefront": {
        "exports": [
          {
            "kind": "scalar",
            "name": "productNames",
          },
        ],
        "includes": {},
        "kind": "object",
        "ofType": "Storefront",
        "operation": "query storefront($id: ID!) {
  storefront(id: $id) {
    productNames
  }
}",
        "pathToExportData": [
          "storefront",
        ],
        "subgraph": "storefronts",
        "type": "Storefront",
        "variables": {
          "id": {
            "kind": "constant",
            "name": "id",
            "value": "apple-store",
          },
        },
      },
    },
    "type": "Query",
  },
  "query": "query ScalarListInType {
  storefront(id: "apple-store") {
    productNames
  }
}",
}
`;

exports[`fixture 'store' > query 'ScalarOperationField' > should execute and explain 1`] = `
[
  {
    "data": {
      "manufacturerName": "Samsung",
    },
    "kind": "scalar",
    "ofType": "String",
    "operation": "query manufacturerName($id: ID!) {
  manufacturerName(id: $id)
}",
    "pathInData": [
      "manufacturerName",
    ],
    "pathToExportData": [
      "manufacturerName",
    ],
    "subgraph": "manufacturers",
    "type": "String",
    "variables": {
      "id": "samsung",
    },
  },
]
`;

exports[`fixture 'store' > query 'ScalarOperationField' > should plan gather 1`] = `
{
  "operation": {
    "name": "ScalarOperationField",
    "resolvers": {
      "manufacturerName": {
        "kind": "scalar",
        "ofType": "String",
        "operation": "query manufacturerName($id: ID!) {
  manufacturerName(id: $id)
}",
        "pathToExportData": [
          "manufacturerName",
        ],
        "subgraph": "manufacturers",
        "type": "String",
        "variables": {
          "id": {
            "kind": "constant",
            "name": "id",
            "value": "samsung",
          },
        },
      },
    },
    "type": "Query",
  },
  "query": "query ScalarOperationField {
  manufacturerName(id: "samsung")
}",
}
`;

exports[`fixture 'store' > query 'ScalarOperationFieldNested' > should execute and explain 1`] = `
[
  {
    "data": {
      "product": {
        "name": "iPad",
      },
    },
    "kind": "scalar",
    "ofType": "String",
    "operation": "query productName($upc: ID!) {
  product(upc: $upc) {
    name
  }
}",
    "pathInData": [
      "productName",
    ],
    "pathToExportData": [
      "product",
      "name",
    ],
    "subgraph": "products",
    "type": "String",
    "variables": {
      "upc": "ipad",
    },
  },
]
`;

exports[`fixture 'store' > query 'ScalarOperationFieldNested' > should plan gather 1`] = `
{
  "operation": {
    "name": "ScalarOperationFieldNested",
    "resolvers": {
      "productName": {
        "kind": "scalar",
        "ofType": "String",
        "operation": "query productName($upc: ID!) {
  product(upc: $upc) {
    name
  }
}",
        "pathToExportData": [
          "product",
          "name",
        ],
        "subgraph": "products",
        "type": "String",
        "variables": {
          "upc": {
            "kind": "constant",
            "name": "upc",
            "value": "ipad",
          },
        },
      },
    },
    "type": "Query",
  },
  "query": "query ScalarOperationFieldNested {
  productName(upc: "ipad")
}",
}
`;

exports[`should build proper operation and find export path for 'FindDeepestPath' resolver 1`] = `
{
  "operation": "query FindDeepestPath {
  manufacturer {
    nested {
      deep
    }
  }
}",
  "pathToExportData": [
    "manufacturer",
    "nested",
    "deep",
  ],
}
`;

exports[`should build proper operation and find export path for 'ManufacturerById' resolver 1`] = `
{
  "operation": "query ManufacturerById($Manufacturer_id: ID!) {
  manufacturer(id: $Manufacturer_id) {
    id
    name
  }
}",
  "pathToExportData": [
    "manufacturer",
  ],
}
`;

exports[`should build proper operation and find export path for 'ManufacturerNested' resolver 1`] = `
{
  "operation": "query ManufacturerNested {
  manufacturer {
    nested {
      deep {
        id
        name
        products {
          manufacturer {
            location
          }
          name
        }
      }
    }
  }
}",
  "pathToExportData": [
    "manufacturer",
    "nested",
    "deep",
  ],
}
`;

exports[`should build proper operation and find export path for 'MultipleTypes' resolver 1`] = `
{
  "operation": "query MultipleTypes {
  productAndManufaturer {
    ... on Product {
      name
      manufacturer {
        products {
          upc
          name
        }
        id
      }
    }
    ... on Manufacturer {
      id
      name
      products {
        manufacturer {
          location
        }
        name
      }
    }
  }
}",
  "pathToExportData": [
    "productAndManufaturer",
  ],
}
`;

exports[`should build proper operation and find export path for 'Nested' resolver 1`] = `
{
  "operation": "query Nested {
  product {
    ... on Product {
      name
      manufacturer {
        products {
          upc
          name
        }
        ... on Manufacturer {
          id
          name
          products {
            manufacturer {
              location
            }
            name
          }
        }
      }
    }
  }
}",
  "pathToExportData": [
    "product",
  ],
}
`;

exports[`should build proper operation and find export path for 'ProductByUpc' resolver 1`] = `
{
  "operation": "query ProductByUpc($Product_upc: ID!) {
  product(upc: $Product_upc) {
    name
    manufacturer {
      products {
        upc
        name
      }
      id
    }
  }
}",
  "pathToExportData": [
    "product",
  ],
}
`;

exports[`should build proper operation and find export path for 'storefront' resolver 1`] = `
{
  "operation": "query storefront($id: ID!) {
  storefront(id: $id) {
    id
    name
    products {
      upc
    }
  }
}",
  "pathToExportData": [
    "storefront",
  ],
}
`;
